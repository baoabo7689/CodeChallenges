

A string S consisting of N characters is called properly nested if:

        S is empty;
        S has the form "(U)" where U is a properly nested string;
        S has the form "VW" where V and W are properly nested strings.

For example, string "(()(())())" is properly nested but string "())" isn't.

Write a function:

    int solution(char *S);

that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.

For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.

Assume that:

        N is an integer within the range [0..1,000,000];
        string S consists only of the characters "(" and/or ")".

Complexity:

        expected worst-case time complexity is O(N);
        expected worst-case space complexity is O(1) (not counting the storage required for input arguments).

Copyright 2009â€“2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 
=================================================================================================================================================================================================================
For S 
	-var brackets = [
		{ start: "(", end: ")" }			
	];
	-If char is open: count++
	-If char is end: count-- (if can't reduce => return 0)
	-If stack remain open tag (count > 0) => return 0.
	-Return 1
		

=================================================================================================================================================================================================================

function solution(S) {	
	var bracket = { start: "(", end: ")", count: 0 };
	
	var openCount = 0;
	
	for(var i=0; i<S.length; i++) {
		var char = S[i];
							
		if(char === bracket.start) {
			openCount++;				
			continue;
		}
		
		if(char === bracket.end) {
			if(openCount == 0) {	
				return 0;					
			}
			
			openCount--;	
			continue;
		}	
	}
		
	return openCount === 0 ? 1 : 0;
}










































































