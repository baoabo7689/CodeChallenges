

A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

        S is empty;
        S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
        S has the form "VW" where V and W are properly nested strings.

For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

    int solution(char *S);

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Assume that:

        N is an integer within the range [0..200,000];
        string S consists only of the following characters: "(", "{", "[", "]", "}" and/or ")".

Complexity:

        expected worst-case time complexity is O(N);
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009â€“2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

=================================================================================================================================================================================================================
For S 
	-var brackets = [
		{ start: "(", end: ")" },
		{ start: "{", end: "}" },	
		{ start: "[", end: "]" }			
	];
	-If char is bracket: 
		-start: push to stack
		-end: pop from stack (if can't: stack empty or previous is not open tag => invalid)
	-If stack remain open tag => return 0.
	-Return 1
		

=================================================================================================================================================================================================================

function solution(S) {	
	var brackets = [
		{ start: "(", end: ")", count: 0 },
		{ start: "{", end: "}", count: 0 },	
		{ start: "[", end: "]", count: 0 }			
	];	
	
	var openTags = [];
	
	for(var i=0; i<S.length; i++) {
		var char = S[i];
				
		for(var j=0; j<brackets.length; j++) {
			var bracket = brackets[j];
			
			if(char === bracket.start) {
				bracket.count++;
				
				openTags.push(char);				
				break;
			}
			
			if(char === bracket.end) {
				bracket.count--;				
				if(bracket.count < 0) {
					return 0;
				}
				
				if(openTags[openTags.length - 1] !== bracket.start) {	
					return 0;					
				}
				
				openTags.pop();
				break;
			}				
		}
	}
		
	return openTags.length === 0 ? 1 : 0;
}

solution('{[()()]}');


===============================================================================================================================================================================

function solution(S) {	
	var brackets = [
		{ start: "(", end: ")" },
		{ start: "{", end: "}" },	
		{ start: "[", end: "]" }			
	];	
	
	var openTags = [];
	
	for(var i=0; i<S.length; i++) {
		var char = S[i];
				
		for(var j=0; j<brackets.length; j++) {
			var bracket = brackets[j];
			
			if(char === bracket.start) {				
				openTags.push(char);				
				break;
			}
			
			if(char === bracket.end) {			
				if(openTags.length === 0) {
					return 0;
				}
				
				if(openTags[openTags.length - 1] !== bracket.start) {	
					return 0;					
				}
				
				openTags.pop();
				break;
			}				
		}
	}
		
	return openTags.length === 0 ? 1 : 0;
}












































































