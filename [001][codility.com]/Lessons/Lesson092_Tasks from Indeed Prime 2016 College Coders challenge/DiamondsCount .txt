A diamond is a quadrilateral whose four sides all have the same length and whose diagonals are parallel to the coordinate axes.

You are given N distinct points on a plane. Count the number of different diamonds that can be constructed using these points as vertices (two diamonds are different if their sets of vertices are different). Do not count diamonds whose area is empty.

Write a function:

    int solution(int X[], int Y[], int N);

that, given two zero-indexed arrays X and Y, each containing N integers, representing N points (where X[K], Y[K] are the coordinates of the K-th point), returns the number of diamonds on the plane.

For example, for N = 7 points whose coordinates are specified in arrays X = [1, 1, 2, 2, 2, 3, 3] and Y = [3, 4, 1, 3, 5, 3, 4], the function should return 2, since we can find two diamonds as shown in the picture below:

Given arrays: X = [1, 2, 3, 3, 2, 1], Y = [1, 1, 1, 2, 2, 2], the function should return 0, since there are no diamonds on the plane:

Assume that:

        N is an integer within the range [4..1,500];
        each element of arrays X, Y is an integer within the range [0..N−1];
        given N points are pairwise distinct.

Complexity:

        expected worst-case time complexity is O(N2);
        expected worst-case space complexity is O(N2), beyond input storage (not counting the storage required for input arguments).

Elements of input arrays can be modified.
Copyright 2009–2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================

 
======================================================================================================================================================


function solution(X, Y) {
	var N = X.length;
	var exists = {};
	
	var briefYs = [];
	var existsY = [];
	var yLines = [];
	
	for(var i=0; i<N; i++) {
		var x = X[i];
		var y = Y[i];
		
		if(!existsY[y]) {
			briefYs.push(y);
			existsY[y] = true;
		}
		
		if(yLines[y] === undefined) {
			yLines[y] = [];
		}
		
		yLines[y].push(x);		
		exists[x + "_" + y] = true;
	}
	
	// console.log(briefYs);
	briefYs = sort(briefYs);
	for(var i=0; i<briefYs.length; i++) {
		var y = briefYs[i];
		yLines[y] = sort(yLines[y]);
	}	
	
	// console.log(briefYs);	
	var count = 0;		
	for(var i=0; i<briefYs.length; i++) {
		var y = briefYs[i];
		var xList = yLines[y];
		
		for(var j=0; j<xList.length; j++) {
			var x = xList[j];
			count += countX(x, y, i, briefYs, yLines, exists);	
			// console.log(y + " " + x + " " + count);		
		}
	}	

	return count;
}


function countX(x, y, yIndex, briefYs, yLines, exists) {	
	var count = 0;
	for(var i=yIndex+1; i<briefYs.length; i++) {
		var y2 = briefYs[i];
		var xList = yLines[y2];
		// console.log(y + " " + y2);	
		
		for(var j=0; j<xList.length; j++) {
			var x2 = xList[j];	
			// console.log(x + " " + x2);			
			if(x <= x2) {
				break;
			}
			
			if(canDiamond(x,y,x2,y2, exists)) {
				count++;
			}
		}		
	}	
	
	return count;
}


function canDiamond(x, y, x2, y2, exists) {
	var x3 = x2 + 2*(x - x2);
	var y3 = y + 2*(y2 - y);
	
	// console.log(x + " " + y + " " + x2 + " " + y2);	
	return exists[x3 + "_" + y2] && exists[x + "_" + y3];
}

function sort(A) {
	var N = A.length;
	
	if(N === 0) {
		return A;
	}
		
	var max = A[0];
	
	var aInfo = [];
	
	for(var i=0; i<N; i++) {
		var value = A[i];
		
		aInfo.push({ value: value, digit: value});
		
		if(max < value) {
			max = value;
		}
	}
	
	N = aInfo.length;
	var M = Math.round(Math.log(max)/Math.log(10));
		
	for(var i=0; i<=M; i++) {
		var sortBaskets = initSortBaskets();
		
		for(var j=0; j<N;j++) {
			var a = aInfo[j];
			var digit = a.digit % 10;
			a.digit = a.digit ? Math.floor(a.digit / 10) : 0;
			
			sortBaskets[digit].push(a);
		}
		
		aInfo = combineSortBaskets(sortBaskets);
	}	
	
	var result = [];	
	for(var i=0; i<N; i++) {		
		result.push(aInfo[i].value);
	}
	
	return result;
}


function initSortBaskets() {
	var sortBaskets = [];
	
	for(var i=0;i<10;i++) {
		sortBaskets.push([]);
	}
	
	return sortBaskets;
}


function combineSortBaskets(sortBaskets) {
	var result = [];
	
	for(var i=0;i<10;i++) {
		var basket = sortBaskets[i];
		
		for(var j=0;j<basket.length; j++) {
			result.push(basket[j]);		
		}
	}
	
	return result;
}


solution([0, 1, 1, 2], [1, 0, 2, 1]);
solution([1, 1, 2, 2, 2, 3, 3], [3, 4, 1, 3, 5, 3, 4]);


[ 1, 3, 4, 5 ]
[ , [ 2 ], , [ 1, 2, 3 ], [ 1, 3 ], [ 2 ] ]

{ 
'1_3': true,
'1_4': true,
'2_1': true,
'2_3': true,
'2_5': true,
'3_3': true,
'3_4': true 
}
1 2 0
3 1 0
3 2 0
3 3 0
4 1 0
4 3 0
5 2 0



1 2 2






























