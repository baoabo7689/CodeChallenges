


Write a function:

    function solution(S);

that, given a string S, returns the index (counting from 0) of a character such that the part of the string to the left of that character is a reversal of the part of the string to its right. The function should return âˆ’1 if no such index exists.

Note: reversing an empty string (i.e. a string whose length is zero) gives an empty string.

For example, given a string:

"racecar"

the function should return 3, because the substring to the left of the character "e" at index 3 is "rac", and the one to the right is "car".

Given a string:

"x"

the function should return 0, because both substrings are empty.

Assume that:

        the length of S is within the range [0..2,000,000].

Complexity:

        expected worst-case time complexity is O(length(S));
        expected worst-case space complexity is O(1) (not counting the storage required for input arguments).

Copyright 2009â€“2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 
======================================================================================================================================================

 
======================================================================================================================================================

function solution(S) {
	if(S.length % 2 === 0) {
		return -1;
	}
	
	var middle = Math.floor(S.length/2);
	for(var start=middle, end=middle; start>=0; start--, end++) {
		if(S[start] !== S[end]) {
			return -1;
		}
	}
	
	return middle;
}





















