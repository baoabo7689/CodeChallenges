
You are given a non-empty zero-indexed array A consisting of N integers.

For each number A[i] such that 0 ≤ i < N, we want to count the number of elements of the array that are not the divisors of A[i]. We say that these elements are non-divisors.

For example, consider integer N = 5 and array A such that:

    A[0] = 3
    A[1] = 1
    A[2] = 2
    A[3] = 3
    A[4] = 6
For the following elements:

A[0] = 3, the non-divisors are: 2, 6,
A[1] = 1, the non-divisors are: 3, 2, 3, 6,
A[2] = 2, the non-divisors are: 3, 3, 6,
A[3] = 3, the non-divisors are: 2, 6,
A[4] = 6, there aren't any non-divisors.
Assume that the following declarations are given:

struct Results {
  int * C;
  int L;
};
Write a function:

struct Results solution(int A[], int N);
that, given a non-empty zero-indexed array A consisting of N integers, returns a sequence of integers representing the amount of non-divisors.

The sequence should be returned as:

a structure Results (in C), or
a vector of integers (in C++), or
a record Results (in Pascal), or
an array of integers (in any other programming language).
For example, given:

    A[0] = 3
    A[1] = 1
    A[2] = 2
    A[3] = 3
    A[4] = 6
the function should return [2, 4, 3, 2, 0], as explained above.

Assume that:

N is an integer within the range [1..50,000];
each element of array A is an integer within the range [1..2 * N].
Complexity:

expected worst-case time complexity is O(N*log(N));
expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.
Copyright 2009–2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.
=================================================================================================================================================================================================================

	
=================================================================================================================================================================================================================

function solution(A) {
	var N = A.length;
	var exists = [];
	var max = 0;
	var divisible = [];
	for(var i=0; i<N; i++) {
		var value = A[i];
		exists[value] = true;
		divisible[value] = 0;
		max = Math.max(max, value);
	}
	
	console.log(exists);
	console.log(divisible);
	console.log(max);
	
	for(var i=0; i<N; i++) {
		var value = A[i];
		
		for(var j=value; j<=max; j+=value) {
			if(!exists[j] || j%value) {
				continue;
			}
		
			divisible[j] = divisible[j]+1;
		}
	}	
		
	console.log(divisible);	
	var result = [];	
	for(var i=0; i<N; i++) {
		var value = A[i];
		result.push(N - divisible[value]);
	}

	console.log(result);
	return result;
}


solution([3, 1, 2, 3, 6]);



function solution(A) {
	var N = A.length;
	var exists = [];
	var max = 0;
	var divisible = [];
	for(var i=0; i<N; i++) {
		var value = A[i];
		exists[value] = true;
		divisible[value] = 0;
		max = Math.max(max, value);
	}
		
	var nexts = [];
	var next = -1;
	for(var i=exists.length-1; i>=0; i--) {
		nexts[i] = next;
		next = i;
	}
	
	for(var i=0; i<N; i++) {
		var value = A[i];
		
		for(var j=value; j<=max; j+=value) {		
			divisible[j] = divisible[j]+ (j%value ? 0 : 1);
		}
	}	
		
	var result = [];	
	for(var i=0; i<N; i++) {
		var value = A[i];
		result.push(N - divisible[value]);
	}

	return result;
}





function solution(A) {
	var N = A.length;
	var exists = [];
	var max = 0;
	var divisibleCounts = [];
	var multiplies = [];
	
	for(var i=0; i<N; i++) {
		var value = A[i];
		exists[value] = true;
		divisibleCounts[value] = 0;
		max = Math.max(max, value);
		multiplies[value]= 1 + (multiplies[value]||0);
	}
	
	console.log(multiplies);
	
	var checks = [];
	var divisibles = [];
	
	for(var i=0; i<N; i++) {
		var value = A[i];
		if(checks[value]) {
			continue;
		}
		
		checks[value] = true;
		
		for(var j=value; j<=max; j+= value) {				
			if(!exists[j] || j%value) {
				continue;				
			}
			
			if(divisibles[value]) {
				divisibles[value].push(j);
			} else {
				divisibles[value]=[j];
			}
		}
	}	
		
	console.log(divisibles);
	for(var i=0; i<divisibles.length; i++) {
		var divisible = divisibles[i];
		if(!divisible) {
			continue;
		}
		
		for(var j=0;j<divisible.length;j++) {
			divisibleCounts[divisible[j]] = divisibleCounts[divisible[j]] + multiplies[i];
		}
	}
	
	console.log(divisibleCounts);
	var result = [];	
	for(var i=0; i<N; i++) {
		var value = A[i];
		result.push(N - divisibleCounts[value]);		
	}

	return result;
}


solution([3, 1, 2, 3, 6]);






function solution(A) {
	var N = A.length;
	var exists = [];
	var max = 0;
	var divisible = [];
	for(var i=0; i<N; i++) {
		var value = A[i];
		exists[value] = true;
		divisible[value] = 0;
		max = Math.max(max, value);
	}
		
	var nexts = [];
	var next = -1;
	for(var i=exists.length-1; i>=0; i--) {		
		nexts[i] = next;
		
		if(exists[i]) {
			next = i;
		}
	}
	
	for(var i=0; i<N; i++) {
		var value = A[i];
		
		for(var j=value; j<=max; j+=value) {	
			divisible[j] = divisible[j]+ (j%value ? 0 : 1);		
		}
	}	
		
	var result = [];	
	for(var i=0; i<N; i++) {
		var value = A[i];
		result.push(N - divisible[value]);		
	}

	return result;
}


solution([3, 1, 2, 3, 6]);

















