Chin is fighting with his mortal enemy, Cho. Chin and Cho are pacifists, so their fight is actually a game of checkers on an infinite board. There are two types of pieces in checkers: pawns and queens. Chin is left with his last piece: a queen. Now it is Chin's turn − the last turn in the game.

Pieces can move only diagonally and forward. A pawn always moves one step in the up-right or up-left direction. A queen can move any number of steps in one of these two directions.

If there is a piece belonging to Cho on the line of Chin's queen's movement, Chin can beat it by leaping over it and optionally passing some more empty fields. Chin can beat only one of Cho's pieces in one move. After beating one of Cho's pieces in this way, Chin can continue his turn and make another move, but only if he can beat another piece.

Chin gains 1 point for beating a pawn and 10 points for beating a queen. Now Chin wants to know the maximum number of points he can score in a single turn. Can you help?

Write a function:

function solution(X, Y, T);
that, given the positions of all the pieces on the board, counts the maximum number of points Chin can score in one turn. X and Y are arrays of N coordinates of pieces: an K-th piece (0 ≤ K < N) occupies board position (X[K], Y[K]); i.e. it appears in the X[K]-th column and Y[K]-th row. Each piece occupies a black field.

T is a string of N characters in which the K-th character represents the type of the K-th piece: 'p' represents one of Cho's pawns and 'q' one of Cho's queens, whilst 'X' represents Chin's queen.

For example, given:

    X = [3, 5, 1, 6]
    Y = [1, 3, 3, 8]
    T = "Xpqp"
the function should return 10. This situation is depicted in the following illustration. Chin's queen is green, Cho's pawns are checked red and her queens are plain red. The optimal turn (sequence of moves) is marked by a green path.



Given:

    X = [0, 3, 5, 1, 6]
    Y = [4, 1, 3, 3, 8]
    T = "pXpqp"
the function should return 2. Note that Chin's queen cannot jump over Cho's queen as her pawn is right behind it.



Finally, given:

    X = [0, 6, 2, 5, 3, 0]
    Y = [4, 8, 2, 3, 1, 6]
    T = "ppqpXp"
the function should return 12. Remember that the board is infinite and the queen can jump onto cells with negative coordinates.



Assume that:

arrays X, Y and string T have the same length N;
N is an integer within the range [1..100,000];
each element of arrays X, Y is an integer within the range [0..100,000,000];
no two pieces have the same coordinates;
each piece is located on a black field (field (0, 0) is black);
string T consists only of the following characters: "p", "q" and/or "X";
string T contains exactly one character "X".
Complexity:

expected worst-case time complexity is O(N*log(N));
expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Copyright 2009–2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.

======================================================================================================================================================
Some hints since I can't comment: I'd suggest trying to rotate the board by 45 degrees. 
Then your problem essentially reduces to your queen going right/upwards. The rest can then be solved with Segment Tree or Treap. 


-Từ 1 điểm (x1,y1) có thể dựng 2 dường thẳng:
	(d1): y = -x + (y1+x1)
	(d2): y =  x + (y1-x1)
	=> dùng tổng và hiệu để xác định (d1), (d2)
	=> từ N điểm: xác định được 2N đường thẳng
-Split T:
	+Loop để đánh dấu, lines theo y, mỗi line chứa danh sách x 
	+Sort: y, x => N*logN
-For each line:
	+Each x: O(N)
		.Xác định max để tới x O(logN)
=> O(N*logN)



-Cách 1:
	.Quay 45 độ, đựng đường ngang dọc 
	=> d=x+y=const: ngang, tăng dần theo x 
	=> s=y-x=const: dọc, giảm dần theo x
	.Khi đó Q chỉ có thể qua trái hoặc đi lên
	.Viết lại (x,y) theo (s,d)
	.Duyệt Q theo s tăng, d tăng 
	.Tưởng tượng lại bàn cờ theo chiều ngang
	.Loop từng điểm: xác định prev s, prev d để đánh min cho điểm đó
	.Return max của min(d, s) từng điểm 
	O(NlogN)
	
======================================================================================================================================================

function sort(A) {	
	var N = A.length;
	
	var positive = [];
	var negative = [];
	
	for(var i=0; i<N; i++) {		
		var value = A[i];
		if(value < 0) {
			negative.push(value);
		}else{
			positive.push(value);
		}
	}
	
	positive = sortBySignIndicator(positive);
	negative = sortBySignIndicator(negative, true);
	var sortedA = negative.concat(positive);	
	
	return sortedA;
}

function sortBySignIndicator(A, isNegative) {
	var N = A.length;
	
	if(N === 0) {
		return A;
	}
		
	var max = Math.abs(A[0]);
	
	var aInfo = [];
	
	for(var i=0; i<N; i++) {
		var value = isNegative ? -A[i] : A[i];
		
		aInfo.push({ value:  value, digit: value});
		
		if(max < value) {
			max = value;
		}
	}
	
	N = aInfo.length;
	var M = Math.round(Math.log(max)/Math.log(10));
		
	for(var i=0; i<=M; i++) {
		var sortBaskets = initSortBaskets();
		
		for(var j=0; j<N;j++) {
			var a = aInfo[j];
			var digit = a.digit % 10;	
			a.digit = a.digit ? Math.floor(a.digit / 10) : 0;
			
			sortBaskets[digit].push(a);
		}
					
		aInfo = combineSortBaskets(sortBaskets);
	}	
	
	var result = [];	
	
	if(isNegative) {
		for(var i=N-1; i>=0; i--) {		
			result.push(-aInfo[i].value);
		}		
	} else {
		for(var i=0; i<N; i++) {		
			result.push(aInfo[i].value);
		}		
	}
	
	return result;
}

function initSortBaskets() {
	var sortBaskets = [];
	
	for(var i=0;i<10;i++) {
		sortBaskets.push([]);
	}
	
	return sortBaskets;
}

function combineSortBaskets(sortBaskets) {
	var result = [];
	
	for(var i=0;i<10;i++) {
		var basket = sortBaskets[i];
		
		for(var j=0;j<basket.length; j++) {
			result.push(basket[j]);		
		}
	}	
	
	return result;
}

function parseTable(X, Y, T) {
	var chinQueen = {
		x: undefined,
		y: undefined,
		point: 0
	};
	
	var pointValues = {
		p: 1,
		q: 10
	};
	
	var dLines = [];
	var sLines = [];
	
	var dExists = [];
	var sExists = [];
	
	for(var i=0; i<T.length; i++) {
		var chess = T[i];
		var x = X[i];
		var y = Y[i];
		
		if(chess === "X") {
			chinQueen.x = x;
			chinQueen.y = y;
			continue;
		}
		
		var d = x + y;
		var s = y - x;
		var point = pointValues[chess];
		
		if(!dExists[d]) {
			dLines.push(d);
			dExists[d] = true;
		}
		
		if(!sExists[s]) {
			sLines.push(s);
			sExists[s] = true;
		}
	}	
	
	dLines = sort(dLines);
	sLines = sort(sLines);
	
	console.log(chinQueen);
	console.log(dLines);
	console.log(sLines);	
}

function solution(X, Y, T) {
	parseTable(X, Y, T);
}


solution( [0, 6, 2, 5, 3, 0], [4, 8, 2, 3, 1, 6], "ppqpXp");

======================================================================================================================================================

function solution(X, Y, T) {
	parseTable(X, Y, T);
}

function parseTable(X, Y, T) {
	var chinQueen = {
		x: undefined,
		y: undefined,
		point: 0
	};
	
	var pointValues = {
		p: 1,
		q: 10
	};
	
	var newX = [];
	var newY = [];
	var points = [];
	
	for(var i=0; i<T.length; i++) {
		var chess = T[i];
		var x = X[i];
		var y = Y[i];
		
		var d = x + y;
		var s = y - x;
		
		if(chess === "X") {
			chinQueen.x = s;
			chinQueen.y = d;
			continue;
		}
		
		var point = pointValues[chess];
		newX[i] = s;
		newY[i] = d;
		points[i] = point;		
	}		

	console.log(chinQueen);
	console.log(newX);
	console.log(newY);	
	console.log(points);	
}

solution( [0, 6, 2, 5, 3, 0], [4, 8, 2, 3, 1, 6], "ppqpXp");

























































































