TreeTrip
Given a network of cities, plan a trip to the most attractive ones.



A network consisting of N cities and N − 1 roads is given. Each city is labeled with a distinct integer from 0 to N − 1.

Roads connect cities in such a way that each distinct pair of cities is connected either by a direct road or through a path consisting of direct roads. There is exactly one way to reach any city from any other city.

Each city also has its own attractiveness level, which will be denoted by an integer. City P is more attractive than city Q if the attractiveness level of city P is strictly greater than the attractiveness level of city Q.

You are planning a trip to visit some of the most attractive cities. You want to select cities to visit based on the following requirements:

        At most K cities can be included in the trip plan.
        It must be possible to travel among the cities included in the trip plan without having to travel through cities that have been excluded from the trip plan.
        None of the cities included in the trip plan can be less attractive than any of the excluded cities. City attractiveness levels do not have to be unique, though, so it is permissible to visit only a subset of cities that are equally attractive.

The goal is to maximize the number of cities selected while satisfying the above requirements.

The network of cities is described using arrays C and D, each of length N. Array C describes a network of cities as follows: if C[P] = Q and P ≠ Q, then there is a direct road between cities P and Q. Array D describes attractiveness of the cities: D[P] is the attractiveness level of city P.

For example, consider the following network consisting of seven cities (each circle represents a city: the city label appears inside the circle and its attractiveness level outside the circle):

If K = 2, we can select a maximum number of two cities: either 2 and 0 or 2 and 4. In both cases, the attractiveness levels of the selected cities are greater than or equal to 6 and the attractiveness levels of the excluded cities are less than or equal to 6.

If, however, K = 5, the maximum number of cities we can select according to the rules above is four: we must select cities 2, 0, 4 and 5.

Write a function:

    function solution(K, C, D);

that, given the integer K and non-empty arrays C and D of length N describing a network of cities and their attractiveness, returns the maximum number of cities that can be included in a valid trip plan.

For example, given arrays C and D describing the network above:
    C[0] = 1    D[0] = 6
    C[1] = 3    D[1] = 2
    C[2] = 0    D[2] = 7
    C[3] = 3    D[3] = 5
    C[4] = 2    D[4] = 6
    C[5] = 4    D[5] = 5
    C[6] = 4    D[6] = 2

and K = 2 the function should return 2, as explained above. Similarly, given the same network but with K = 5, the function should return 4, as explained above.

Assume that:

        N is an integer within the range [1..100,000];
        K is an integer within the range [1..N];
        each element of array C is an integer within the range [0..(N−1)];
        there is exactly one (possibly indirect) connection between any two distinct cities;
        each element of array D is an integer within the range [0..1,000,000].

Complexity:

        expected worst-case time complexity is O(N*log(N));
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009–2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================

-MinAttractive Index: 0->length-1, logN
	.big>k => MinAttractive++	
	.Nếu thỏa: big == count[MinAttractive++] => MinAttractive--		
	.Nếu không thỏa: => big < count[MinAttractive++] => MinAttractive--
		
-tính max group => O(N)
=> O(NlogN)


-Từ leaves lên parent để tính node phải đi qua => nếu >k là không thỏa 


======================================================================================================================================================

function sort(A) {
	var N = A.length;
	
	if(N === 0) {
		return A;
	}
		
	var max = A[0];
	
	var aInfo = [];
	
	for(var i=0; i<N; i++) {
		var a = A[i];
		
		if(a.value < 0) {
			continue;
		}
		
		aInfo.push({ value: a, digit: a.value});
		
		if(max.value < a.value) {
			max = a;
		}
	}
	
	N = aInfo.length;
	var M = Math.round(Math.log(max.value)/Math.log(10));
		
	for(var i=0; i<=M; i++) {
		var sortBaskets = initSortBaskets();
		
		for(var j=0; j<N;j++) {
			var a = aInfo[j];
			var digit = a.digit % 10;
			a.digit = a.digit ? Math.floor(a.digit / 10) : 0;
			
			sortBaskets[digit].push(a);
		}
		
		aInfo = combineSortBaskets(sortBaskets);
	}	
	
	var result = [];	
	for(var i=0; i<N; i++) {		
		result.push(aInfo[i].value);
	}
	
	return result;
}

function initSortBaskets() {
	var sortBaskets = [];
	
	for(var i=0;i<10;i++) {
		sortBaskets.push([]);
	}
	
	return sortBaskets;
}

function combineSortBaskets(sortBaskets) {
	var result = [];
	
	for(var i=0;i<10;i++) {
		var basket = sortBaskets[i];
		
		for(var j=0;j<basket.length; j++) {
			result.push(basket[j]);		
		}
	}
	
	return result;
}

function createNode(i, d) {
	return {
		value: d,
		index: i,
		relations: []
	};	
}

function getSortedAttractives(nodes, N) {
	var sortedAttractives = [];
	var usedAttractives = [];
	var sorted = sort(nodes);
	
	for(var i=0; i<N; i++) {
		var d = sorted[i].value;
		if(usedAttractives[d]) {
			continue;
		}
		
		usedAttractives[d] = true;
		sortedAttractives.push(d);
	}
	
	return sortedAttractives;	
}

function getPrefixCounts(sortedAttractives, counts) {	
	var prefixCounts = [];
	prefixCounts[sortedAttractives.length] = 0;
	for(var i=sortedAttractives.length-1; i>=0; i--) {
		prefixCounts[i] = prefixCounts[i+1] + counts[sortedAttractives[i]];		
	}
	
	return prefixCounts;	
}

function getAttractiveIndex(sortedAttractives, attractive) {
	var lMin = 0;
	var rMin = sortedAttractives.length - 1;
	var mMin;
				
	while(lMin <= rMin) {
		mMin =  Math.floor((lMin + rMin) / 2);	
		var mValue = sortedAttractives[mMin];
		if(mValue == attractive)	{
			break;
		}
		
		if(mValue < attractive) {
			lMin = mMin + 1;
		} else {
			rMin = mMin - 1;
		}
	}
		
	return 	mMin;	
}

function solution(K, C, D) {	
	console.log("(" + K + ",");
	console.log("[" + C + "],");
	console.log("[" + D + "]);");
	
	var N = C.length;
	if(K==1 || K == N) {
		return K;
	}
	
	var nodesByIndex = [];
	var counts = [];
	var nodeCounts = [];
		
	for(var i=0; i<N; i++) {
		var d = D[i];
		nodesByIndex[i] = createNode(i, d);	
		counts[d] = 0;
		nodeCounts[d] = [];
	}
		
	for(var i=0; i<N; i++) {
		var c = C[i];
		var d = D[i];
		var nodeI = nodesByIndex[i];
		var nodeC = nodesByIndex[c];
		
		if(c != i) {
			nodeI.relations.push(nodeC);
			nodeC.relations.push(nodeI);				
		}
		
		counts[d]++;	
		nodeCounts[d].push(nodeI);		
	}
		
	var sortedAttractives = getSortedAttractives(nodesByIndex, N);	
	var prefixCounts = getPrefixCounts(sortedAttractives, counts);
	
	console.log(sortedAttractives);
	console.log(prefixCounts);
	
	var maxAttractive = sortedAttractives[sortedAttractives.length - 1];
	var roots = nodeCounts[maxAttractive];
	var left = 0;
	var right = sortedAttractives.length - 1;
	var maxLength = 1;
	
	debugger;	
	while(left <= right) {	
		var middle = Math.floor((left + right) / 2);
		if(prefixCounts[middle + 1] >= K) {
			// Must go through all [Middle + 1] to reach [Middle]
			left = middle + 1;
			continue;
		}
		
		var minAttractive = sortedAttractives[middle];	
		var rootGroup = [];
		
		for(var i=0; i<roots.length; i++) {
			var root = roots[i];
			if(rootGroup[root.index] != undefined) {
				continue;
			}
			
			var nextRelations = [root];	
			var groupCounts = [];	
			var parentNodes = [];
			var hasChilds = [];
			var groupNodes = [];
				
			while(nextRelations.length) {
				var tempRelations = [];
				
				for(var j=0; j<nextRelations.length; j++) {
					var nextRelation = nextRelations[j];
					if(rootGroup[nextRelation.index] != undefined || nextRelation.value < minAttractive) {
						continue;
					}
										
					for(var k=0; k<nextRelation.relations.length; k++) {
						var relation = nextRelation.relations[k];
						if(rootGroup[relation.index] != undefined || relation.value < minAttractive) {
							continue;
						}
					
						hasChilds[nextRelation.index] = true;
						parentNodes[relation.index] = nextRelation;
						tempRelations.push(relation);
					}	
					
					rootGroup[nextRelation.index] = root.index;		
					groupNodes.push(nextRelation);
					
					if(groupCounts[nextRelation.value] == undefined) {						
						groupCounts[nextRelation.value] = 1;
					}	else {				
						groupCounts[nextRelation.value]++;						
					}			
				}				
				
				nextRelations = tempRelations;				
			}
			
			for(var j=sortedAttractives.length-1;  j>=0; j--) {
				var d = sortedAttractives[j];
				if(groupCounts[d] != counts[d]) {
					break;
				}
			}
			
			if(j > middle) {
				// K>prefixCounts[middle + 1] => cover all [j+1] + những phần tử [j]		
				var groupMinAttractive = sortedAttractives[j];
				var checkedNodes = [];

				for(var k=0; k<roots.length; k++) {
					var groupRoot = roots[k];
					if(rootGroup[groupRoot.index] != root.index || checkedNodes[groupRoot.index]) {
						continue;
					}
					
					var groupNextRelations = [groupRoot];
					var groupCount = 0;
					
					while(groupNextRelations.length) {
						var groupNextRelationsTemp = [];
						for(var l=0; l<groupNextRelations.length; l++) {
							var groupNextRelation = groupNextRelations[l];
							if(groupNextRelation.value < groupMinAttractive || rootGroup[groupNextRelation.index] != root.index || checkedNodes[groupNextRelation.index]) {
								continue;
							}
							
							for(var m=0; m<groupNextRelation.relations.length; m++) {
								var groupRelation = groupNextRelation.relations[m];
								if(groupRelation.value < groupMinAttractive || rootGroup[groupRelation.index] != root.index || checkedNodes[groupRelation.index]) {
									continue;
								}
								
								groupNextRelationsTemp.push(groupRelation);
							}
							
							checkedNodes[groupNextRelation.index] = true;
							groupCount++;						
						}
						
						groupNextRelations = groupNextRelationsTemp;
					}
					
					maxLength = Math.max(groupCount, maxLength);				
				}	

				continue;
			} 
			
			var leaves = [];
			for(var k=0; k<groupNodes.length; k++) {
				var groupNode =groupNodes[k];
				
				if(hasChilds[groupNode.index]) {
					continue;
				}
				
				leaves.push(groupNode);
			}
			
			var mustUsed = [];
			var countedNodes = [];
			var mustCount=0;
			while(leaves.length) {
				var leafTemp = [];				
				for(var lf=0; lf<leaves.length; lf++) {
					var leaf = leaves[lf];
					var must = leaf.value > minAttractive || mustUsed[leaf.index];					
					if(must) {
						mustUsed[leaf.index] = true;
					}
					
					if(must && !countedNodes[leaf.index]) {
						mustCount++;
						countedNodes[leaf.index] = true;
					}
					
					var parentNode = parentNodes[leaf.index];				
					if(parentNode == undefined) {
						continue;
					}
					
					if(must) {
						mustUsed[parentNode.index] = true;
					}
					
					leafTemp.push(parentNode);			
				}
				
				leaves = leafTemp;				
			}		

			if(mustCount <= K) {
				var min = Math.min(K, groupNodes.length);
				maxLength = Math.max(min, maxLength);
				continue;
			}	

			var groupMinAttractive = sortedAttractives[middle + 1];
			var nextRelations = [root];	
			var groupCounts = [];	
				
			while(nextRelations.length) {
				var tempRelations = [];
				
				for(var j=0; j<nextRelations.length; j++) {
					var nextRelation = nextRelations[j];
					if(rootGroup[nextRelation.index] != undefined || nextRelation.value < groupMinAttractive) {
						continue;
					}
										
					for(var k=0; k<nextRelation.relations.length; k++) {
						var relation = nextRelation.relations[k];
						if(rootGroup[relation.index] != undefined || relation.value < groupMinAttractive) {
							continue;
						}
										
						tempRelations.push(relation);
					}	
					
					rootGroup[nextRelation.index] = root.index;		
					groupNodes.push(nextRelation);
					
					if(groupCounts[nextRelation.value] == undefined) {						
						groupCounts[nextRelation.value] = 1;
					}	else {				
						groupCounts[nextRelation.value]++;						
					}			
				}				
				
				nextRelations = tempRelations;				
			}
			
			for(var j=sortedAttractives.length-1;  j>=0; j--) {
				var d = sortedAttractives[j];
				if(groupCounts[d] != counts[d]) {
					break;
				}
			}
				
			groupMinAttractive = sortedAttractives[j];
			var checkedNodes = [];

			for(var k=0; k<roots.length; k++) {
				var groupRoot = roots[k];
				if(rootGroup[groupRoot.index] != root.index || checkedNodes[groupRoot.index]) {
					continue;
				}
				
				var groupNextRelations = [groupRoot];
				var groupCount = 0;
				
				while(groupNextRelations.length) {
					var groupNextRelationsTemp = [];
					for(var l=0; l<groupNextRelations.length; l++) {
						var groupNextRelation = groupNextRelations[l];
						if(groupNextRelation.value < groupMinAttractive || rootGroup[groupNextRelation.index] != root.index || checkedNodes[groupNextRelation.index]) {
							continue;
						}
						
						for(var m=0; m<groupNextRelation.relations.length; m++) {
							var groupRelation = groupNextRelation.relations[m];
							if(groupRelation.value < groupMinAttractive || rootGroup[groupRelation.index] != root.index || checkedNodes[groupRelation.index]) {
								continue;
							}
							
							groupNextRelationsTemp.push(groupRelation);
						}
						
						checkedNodes[groupNextRelation.index] = true;
						groupCount++;						
					}
					
					groupNextRelations = groupNextRelationsTemp;
				}
				
				maxLength = Math.max(groupCount, maxLength);				
			}		
		}
		
		right = middle - 1;
	}
		
	return maxLength;
}



solution(14,
[4,5,7,2,7,8,2,8,10,4,10,9,3,0,6],
[50,50,50,50,50,50,30,30,30,60,60,60,60,60,60]);
[ 30, 50, 60 ]
[ 15, 12, 6, 0 ]

got 5 expected 2 


































