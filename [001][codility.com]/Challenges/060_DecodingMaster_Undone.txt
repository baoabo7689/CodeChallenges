louis.nguyen@starixsoft.com
https://app.codility.com/c/feedback/ZZWWH4-S5F
https://app.codility.com/c/feedback/XMY3GR-DFX
https://app.codility.com/c/feedback/KFYVSH-YW2


baoabo7689@gmail.com
+841284926909
University of Science




Little Johnny has just received a gift: a set of N domino tiles. Each domino tile is a rectangular block of size 2 x 1, divided into two halves of size 1 x 1 each. Every half-domino is marked with some number of dots âˆ’ from zero to six (inclusive).
Johnny creates a sequence of dominos by putting all the tiles next to each other horizontally, end to end, forming a rectangle of size 2N x 1. He would like to maximize the number of consecutive domino halves in his sequence having the same number of dots. Please note that Johnny may rotate some of the tiles if he wishes.
Write a function:

function solution(A,B);
that, given two arrays A and B, each containing N integers, denoting the counts of the dots on both ends of the N domino tiles (A[0] and B[0] describe the first domino tile, A[1] and B[1] describe the second domino tile, etc.), returns the maximal length of a valid sequence of domino tiles.
For example, given: A = [1, 5, 4, 5, 2] and B = [2, 5, 5, 5, 2], your function should return 5 because out of the domino set: (1,2), (5,5), (4,5), (5,5), (2,2), Johnny may place tiles in the following way: (1,2), (5,5), (5,5), (5,4), (2,2) and obtain five consecutive halves having five dots each (the whole second block, the whole third block and one half of the fourth block).


Write an algorithm for the following assumptions:
N is an integer within the range [1..100,000]
each element of arrays A, B is an integer within the range [0..6].




function solution(A, B) {
	var N = A.length;
	var dominoSameValues = [];
	for(var i=0; i<=6; i++) {
		dominoSameValues[i] = 0; 
	}
	
	var dominoDiffValues = [];
	for(var i=0; i<=6; i++) {
		dominoDiffValues[i] = 0; 
	}
		
	for(var i=0; i<N; i++) {
		var a = A[i];
		var b = B[i];
		if(a == b) {
			dominoSameValues[a] += 2;
		} else {
			dominoDiffValues[a]++;
			dominoDiffValues[b]++;			
		}
	}
	
	//console.log(dominoSameValues);
	//console.log(dominoDiffValues);
	var result = 0;
	for(var i=0; i<=6; i++) {
		var count = dominoSameValues[i] + Math.min(2, dominoDiffValues[i]);
		result = Math.max(count, result);
	}
	
	return result;
}



======================================================================================================================================================


There are two candy shops, both of which have N candies for sale. The first shop sells each candy for one golden coin; the second shop sells each candy for one silver coin. 
You have N/2 golden coins and N/2 silver ones (N is even).
Each candy is of some particular type (not necessarily unique), represented by an integer. What is the maximum number of different types of candy that you can buy?
Write a function:
function solution(A, B);
that, given two arrays A and B of N integers, representing types of candies in the first and second shop respectively, returns the maximum possible number of different types of candy that you can buy.
For example, given:

A = [1, 2, 3, 4]
B = [3, 3, 3, 7]
the function should return 4. You can, for example, buy candies of types 1, 2 in the first shop and then candies of types 3, 7 in the second shop.
Given:
A = [2, 2, 2, 2, 2, 2]
B = [7, 4, 2, 5, 1, 2]
the function should also return 4. In the first shop you can only buy candies of type 2, but then you can buy three candies of other types (for example, 7, 4 and 5) in the second shop.
Write an efficient algorithm for the following assumptions:
N is an integer within the range [2..100,000];
N is even;
each element of arrays A, B is an integer within the range [1..1,000,000,000].



function solution(A, B) {
	var N = A.length;
	var nCoins = N/2;
	
	var existsA = [];
	var existsB = [];
	var exists = [];
	var values = [];
	
	for(var i=0; i<N; i++) {
		var a = A[i];
		existsA[a] = true;
		if(!exists[a]) {
			values.push(a);
			exists[a] = true;
		}
		
		var b = B[i];
		existsB[b] = true;
		if(!exists[b]) {
			values.push(b);
			exists[b] = true;
		}		
	}
	
	
	var diffA = 0;
	var diffB = 0;
	var sameAB = 0;
	
	for(var i=0; i<values.length; i++) {
		var a = values[i];
		if(existsA[a] && existsB[a]) {
			sameAB++;
			continue;
		}
		
		if(existsA[a] && !existsB[a]) {
			diffA++;
			continue;
		}
				
		if(!existsA[a] && existsB[a]) {
			diffB++;
			continue;
		}
	}
	
	//console.log(diffA);
	//console.log(diffB);
	//console.log(sameAB);
	if(diffA >= nCoins) {	
		return nCoins + Math.min(diffB + sameAB, nCoins);		
	}
	
	if(diffB >= nCoins) {
		return nCoins + Math.min(diffA + sameAB, nCoins);	
	}
	
	var remainA = nCoins - diffA;
	var remainB = nCoins - diffB;	
	return diffA + diffB + Math.min(remainA + remainB, sameAB);		
}



======================================================================================================================================================























































