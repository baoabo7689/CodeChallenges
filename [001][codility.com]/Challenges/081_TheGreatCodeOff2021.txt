
The Great Code Off 2021


There is a cake factory producing K-flavored cakes. Flavors are numbered from 1 to K. A cake should consist of exactly K layers, each of a different flavor. It is very important that every flavor appears in exactly one cake layer and that the flavor layers are ordered from 1 to K from bottom to top. Otherwise the cake doesn't taste good enough to be sold. For example, for K = 3, cake [1, 2, 3] is well-prepared and can be sold, whereas cakes [1, 3, 2] and [1, 2, 3, 3] are not well-prepared.

The factory has N cake forms arranged in a row, numbered from 1 to N. Initially, all forms are empty. At the beginning of the day a machine for producing cakes executes a sequence of M instructions (numbered from 0 to M−1) one by one. The J-th instruction adds a layer of flavor C[J] to all forms from A[J] to B[J], inclusive.

What is the number of well-prepared cakes after executing the sequence of M instructions?

Write a function:

    function solution(N, K, A, B, C);

that, given two integers N and K and three arrays of integers A, B, C describing the sequence, returns the number of well-prepared cakes after executing the sequence of instructions.

Examples:

1. Given N = 5, K = 3, A = [1, 1, 4, 1, 4], B = [5, 2, 5, 5, 4] and C = [1, 2, 2, 3, 3].

There is a sequence of five instructions:

        The 0th instruction puts a layer of flavor 1 in all forms from 1 to 5.
        The 1st instruction puts a layer of flavor 2 in all forms from 1 to 2.
        The 2nd instruction puts a layer of flavor 2 in all forms from 4 to 5.
        The 3rd instruction puts a layer of flavor 3 in all forms from 1 to 5.
        The 4th instruction puts a layer of flavor 3 in the 4th form.

The picture describes the first example test.

The function should return 3. The cake in form 3 is missing flavor 2, and the cake in form 5 has additional flavor 3. The well-prepared cakes are forms 1, 2 and 5.

2. Given N = 6, K = 4, A = [1, 2, 1, 1], B = [3, 3, 6, 6] and C = [1, 2, 3, 4],

The picture describes the second example test.

the function should return 2. The 2nd and 3rd cakes are well-prepared.

3. Given N = 3, K = 2, A = [1, 3, 3, 1, 1], B = [2, 3, 3, 1, 2] and C = [1, 2, 1, 2, 2],

The picture describes the third example test.

the function should return 1. Only the 2nd cake is well-prepared.

4. Given N = 5, K = 2, A = [1, 1, 2], B = [5, 5, 3] and C = [1, 2, 1],

The picture describes the fourth example test.

the function should return 3. The 1st, 4th and 5th cakes are well-prepared.

Write an efficient algorithm for the following assumptions:

        N is an integer within the range [1..100,000];
        M is an integer within the range [1..200,000];
        each element of arrays A, B is an integer within the range [1..N];
        each element of array C is an integer within the range [1..K];
        for every integer J, A[J] ≤ B[J];
        arrays A, B and C have the same length, equal to M.

Copyright 2009–2021 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 




======================================================================================================================================================

	
	
======================================================================================================================================================


// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(N, K, A, B, C) {
    // write your code in JavaScript (Node.js 8.9.4)
	var forms = [];
	for(var i=0; i<N; i++) {
		forms[i] =  [];
	}
		
	var M = C.length;
	for(var i=0; i<M; i++) {
		var a = A[i]-1;
		var b = B[i]-1;
		var c = C[i];
		
		for(var j=a; j<=b; j++) {
			var form = forms[j];
			
			if(form.length == 0 && c == 1) {
				form[form.length] = c;
				continue;
			}
			
			if(form[form.length - 1] == -1) {
				continue;
			}
			
			form[form.length] = form[form.length - 1]+1==c ? c : -1;
		}		
	}	
	
	var count = 0;
	for(var i=0; i<N; i++) {
		var form = forms[i];
		if(form.length == K && form[form.length - 1]==K) {
			count++;
		}
	}
		
	return count;
}


Silver Award 


======================================================================================================================================================



function simplifyLayer(layer) {
	var currentSE = layer[0];
	var validRanges = [];
	for(var i=1; i<layer.length; i++) {		
		var ranges = [currentSE];
		
		for(var j=i; j<layer.length; j++) {
			var seJ = layer[j];
			if(seJ.start > currentSE.start) {
				break;
			}
			
			if(seJ.end < currentSE.start) {
				continue;
			}
			
			ranges.push(seJ);
		}
		
		if(j == layer.length && ranges.length == 1) {
			validRanges.push(currentSE);
			currentSE = null;
			break;
		}
		
		var rJ = layer[j];		
		if(ranges.length == 1 && rJ.start > currentSE.end) {			
			validRanges.push(currentSE);
			currentSE = rJ;
			i = j;
			continue;
		}
		
		if(ranges.length == 1) {
			var validRange = {
				start: currentSE.start,
				end: rJ.start-1,
				layer: currentSE.layer,
				position: currentSE.position
			};
			
			validRanges.push(validRange);
			
			currentSE.start = rJ.start;
			if(currentSE.end < currentSE.start) {
				currentSE = rJ;
				i = j;
			} else {
				i--;
			}
			
			continue;
		}
				
		ranges.sort(function(a,b) {
			return b.end - a.end;
		});
		
		var r0 = ranges[0];
		var r1 = ranges[1];
		if(r0.end == r1.end) {
			currentSE = layer[j];
			i=j;
			continue;
		}
		
		currentSE = {
			start: r1.end+1,
			end: r0.end,
			layer: r0.layer,
			position: r0.position
		};
	}
	
	if(currentSE) {
		validRanges.push(currentSE);
	}
	
	return validRanges;
}


function combineLayers(N, K, M, layers) {
	var forms = [];
	for(var i=1; i<=N+1; i++) {
		forms[i] = {
			starts: [],
			ends: []
		};
	}
	
	for(var i=1; i<=K; i++) {
		var layer = layers[i];
		for(var j=0; j<layer.length; j++) {
			var lj = layer[j];
			
			forms[lj.start].starts.push({ layer: i, position: lj.position });
			forms[lj.end+1].ends.push(i);			
		}		
	}
	
	return forms;	
}


function solution(N, K, A, B, C) {
    // write your code in JavaScript (Node.js 8.9.4)
	var M = C.length;
	
	// Make start-end-position list
	var ses = [];
	for(var i=0; i<M; i++) {
		var layer = C[i];
		var se = {
			start: A[i],
			end: B[i],
			layer: C[i],
			position: i
		};
		
		ses.push(se);		
	}
	
	ses.sort(function(a,b) {
		if(a.start == b.start) {
			return a.position - b.position;
		}
		
		return a.start - b.start;
	});
		
	// Split by Layer
	var layers = [];
	for(var i=1; i<=K; i++) {
		layers[i] = [];
	}
	
	for(var i=0; i<M; i++) {
		var se = ses[i];
		layers[se.layer].push(se);		
	}
	
	
	// Make Separated Ranges for each Layer
	for(var i=1; i<=K; i++) {
		var layer = layers[i];
		if(layer.length == 0) {
			return 0;
		}
		
		layers[i] = layer.length == 1 ? layer : simplifyLayer(layer);
	}
	
	// Combine Layers 
	var forms = combineLayers(N, K, M, layers);
	var layerByPos = [];
	for(var i=0; i<=K; i++) {
		layerByPos[i] = -1;
	}
	
	debugger;
	// Count Valids
	var count = 0;
	var correctIndex = 0;
	var filledLayers = 0;
	for(var i=1; i<=N+1; i++) {
		var form = forms[i];
		
		for(var j=0; j< form.ends.length; j++) {
			var e = form.ends[j];
			layerByPos[e] = -1;
			correctIndex = Math.min(correctIndex, e-1);
		}
		
		for(var j=0; j< form.starts.length; j++) {
			var s = form.starts[j];
			layerByPos[s.layer] = s.position;
		}	
		
		filledLayers += form.starts.length - form.ends.length;			
		if(filledLayers == K) {
			for(; correctIndex<K && layerByPos[correctIndex] < layerByPos[correctIndex+1]; correctIndex++);
		}	
		
		if(correctIndex == K) {
			count++;
		}				
	}
		
	return count;
}


Correct: Silver
O(M*sqrt(N)) 

layerByPos.join(", ")
correctLayers


======================================================================================================================================================

solution (100, 20,
[ 51, 45, 77, 1, 74, 1, 74, 42, 87, 26, 1, 1, 74, 1, 1, 1, 64, 1, 1, 1, 26, 86, 1, 1, 1, 65, 1, 17, 1, 71, 65, 1, 1, 1, 53, 1, 12, 1, 64, 88 ],
[ 100, 100, 100, 44, 100, 63, 100, 100, 100, 100, 50, 11, 100, 70, 86, 25, 100, 64, 16, 64, 100, 100, 73, 87, 52, 100, 25, 100, 73, 100, 100, 73, 76, 85, 100, 41, 100, 63, 100, 100 ],
[ 1, 2, 3, 2, 4, 10, 5, 6, 7, 8, 1, 18, 9, 15, 7, 11, 10, 16, 14, 13, 11, 12, 5, 20, 17, 13, 8, 14, 4, 15, 16, 9, 3, 12, 17, 6, 18, 19, 19, 20 ])







solution  (5, 3, [1, 1, 4, 1, 4], [5, 2, 5, 5, 4], [1, 2, 2, 3, 3])

shuffled_colors
✘
WRONG ANSWER
got 0 expected 13 
https://app.codility.com/cert/view/cert3GWM2V-E7QF3MVW4QQKNBWS/details/
100, 20, 
[51, 45, 77, 1, 74, 1, 74, 42, 87, 26, 1, 1, 74, 1, 1, 1, 64, 1, 1, 1, 26, 86, 1, 1, 1, 65, 1, 17, 1, 71, 65, 1, 1, 1, 53, 1, 12, 1, 64, 88],
[100, 100, 100, 44, 100, 63, 100, 100, 100, 100, 50, 11, 100, 70, 86, 25, 100, 64, 16, 64, 100, 100, 73, 87, 52, 100, 25, 100, 73, 100, 100, 73, 76, 85, 100, 41, 100, 63, 100, 100],
[1, 2, 3, 2, 4, 10, 5, 6, 7, 8, 1, 18, 9, 15, 7, 11, 10, 16, 14, 13, 11, 12, 5, 20, 17, 13, 8, 14, 4, 15, 16, 9, 3, 12, 17, 6, 18, 19, 19, 20]






======================================================================================================================================================



function simplifyLayer(layer) {
	var currentSE = layer[0];
	var validRanges = [];
	for(var i=1; i<layer.length; i++) {		
		var ranges = [currentSE];
		
		for(var j=i; j<layer.length; j++) {
			var seJ = layer[j];
			if(seJ.start > currentSE.start) {
				break;
			}
			
			if(seJ.end < currentSE.start) {
				continue;
			}
			
			ranges.push(seJ);
		}
		
		if(j == layer.length && ranges.length == 1) {
			validRanges.push(currentSE);
			currentSE = null;
			break;
		}
		
		var rJ = layer[j];		
		if(ranges.length == 1 && rJ.start > currentSE.end) {			
			validRanges.push(currentSE);
			currentSE = rJ;
			i = j;
			continue;
		}
		
		if(ranges.length == 1) {
			var validRange = {
				start: currentSE.start,
				end: rJ.start-1,
				layer: currentSE.layer,
				position: currentSE.position
			};
			
			validRanges.push(validRange);
			
			currentSE.start = rJ.start;
			if(currentSE.end < currentSE.start) {
				currentSE = rJ;
				i = j;
			} else {
				i--;
			}
			
			continue;
		}
				
		ranges.sort(function(a,b) {
			return b.end - a.end;
		});
		
		var r0 = ranges[0];
		var r1 = ranges[1];
		if(r0.end == r1.end) {
			currentSE = layer[j];
			i=j;
			continue;
		}
		
		currentSE = {
			start: r1.end+1,
			end: r0.end,
			layer: r0.layer,
			position: r0.position
		};
	}
	
	if(currentSE) {
		validRanges.push(currentSE);
	}
	
	return validRanges;
}


function combineLayers(N, K, M, layers) {
	var forms = [];
	for(var i=1; i<=N+1; i++) {
		forms[i] = {
			starts: [],
			ends: []
		};
	}
	
	for(var i=1; i<=K; i++) {
		var layer = layers[i];
		for(var j=0; j<layer.length; j++) {
			var lj = layer[j];
			
			forms[lj.start].starts.push({ layer: i, position: lj.position });
			forms[lj.end+1].ends.push(i);			
		}		
	}
	
	return forms;	
}

function isValid(layer, layerByPos) {
	var pos1 = layerByPos[layer-1];
	var pos2 = layerByPos[layer];
	var pos3 = layerByPos[layer+1];
	return (pos1 == -1 || pos1 <= pos2) && (pos3 == -1 || pos3 >= pos2);
}

function solution(N, K, A, B, C) {
	//console.log("solution(" + N + ", " + K + ", ");
	//console.log("[" + A.join(", ") + "], ");
	//console.log("[" + B.join(", ") + "], ");
	//console.log("[" + C.join(", ") + "])");
	
    // write your code in JavaScript (Node.js 8.9.4)
	var M = C.length;
	
	// Make start-end-position list
	var ses = [];
	for(var i=0; i<M; i++) {
		var layer = C[i];
		var se = {
			start: A[i],
			end: B[i],
			layer: C[i],
			position: i
		};
		
		ses.push(se);		
	}
	
	ses.sort(function(a,b) {
		if(a.start == b.start) {
			return a.position - b.position;
		}
		
		return a.start - b.start;
	});
		
	// Split by Layer
	var layers = [];
	for(var i=1; i<=K; i++) {
		layers[i] = [];
	}
	
	for(var i=0; i<M; i++) {
		var se = ses[i];
		layers[se.layer].push(se);		
	}
	
	
	// Make Separated Ranges for each Layer
	for(var i=1; i<=K; i++) {
		var layer = layers[i];
		if(layer.length == 0) {
			return 0;
		}
		
		layers[i] = layer.length == 1 ? layer : simplifyLayer(layer);
	}
	
	// Combine Layers 
	var forms = combineLayers(N, K, M, layers);	
	var layerByPos = [];
	for(var i=0; i<=K+1; i++) {
		layerByPos[i] = -1;
	}
	
	// Count Valids
	var count = 0;
	var correctLayers = 0;
	var filledLayers = 0;
	// debugger;	
	for(var i=1; i<=N; i++) {
		debugger;	
		var form = forms[i];
		
		for(var j=0; j< form.ends.length; j++) {
			var e = form.ends[j];	
			correctLayers -= countSegments(K, e, layerByPos);			
			layerByPos[e] = -1;						
		}
		
		for(var j=0; j< form.starts.length; j++) {
			var s = form.starts[j];
			layerByPos[s.layer] = s.position;
			correctLayers += countSegments(K, s.layer, layerByPos);		
		}	
		
		if(correctLayers == K) {
			count++;
		}				
	}
		
	return count;
}


function countSegments(N, layer, layerByPos) {
	var pos1 = layerByPos[layer-1];
	var pos2 = layerByPos[layer];
	var pos3 = layerByPos[layer+1];
	
	if(layer == 1) {
		return pos3 == -1 || pos3 < pos2 ? 1 : 2;
	}
	
	
	if(layer == N) {
		return pos1 == -1 || pos1 > pos2 ? 0 : 1;
	}
	
	var result = 0;
	result += pos1 == -1 || pos1 > pos2 ? 0 : 1;
	result += pos3 == -1 || pos3 < pos2 ? 0 : 1;	
	return result;	
}

solution(2, 4, 
[1, 2, 1, 2, 1, 2, 1, 2], 
[1, 2, 1, 2, 1, 2, 1, 2], 
[1, 2, 2, 1, 3, 3, 4, 4])

WRONG ANSWER got 2 expected 1


solution  (10, 15, 
[2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1], 
[10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9], 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 10, 11, 12, 13, 14, 15]) 

 WRONG ANSWER, got 9 expected 10 




======================================================================================================================================================



























































