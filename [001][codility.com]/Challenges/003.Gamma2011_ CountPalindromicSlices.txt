

In this problem we consider only strings consisting of lower-case English letters (a−z).

A string is a palindrome if it reads exactly the same from left to right as it does from right to left. For example, these strings are palindromes:

        aza
        abba
        abacaba

These strings are not palindromes:

        zaza
        abcd
        abacada

Given a string S of length N, a slice of S is a substring of S specified by a pair of integers (p, q), such that 0 ≤ p < q < N. A slice (p, q) of string S is palindromic if the string consisting of letters S[p], S[p+1], ..., S[q] is a palindrome. For example, in a string S = abbacada:

        slice (0, 3) is palindromic because abba is a palindrome,
        slice (6, 7) is not palindromic because da is not a palindrome,
        slice (2, 5) is not palindromic because baca is not a palindrome,
        slice (1, 2) is palindromic because bb is a palindrome.

Write a function

    function solution(S);

that, given a string S of length N letters, returns the number of palindromic slices of S. The function should return −1 if this number is greater than 100,000,000.

For example, for string S = baababa the function should return 6, because exactly six of its slices are palindromic; namely: (0, 3), (1, 2), (2, 4), (2, 6), (3, 5), (4, 6).

Assume that:

        N is an integer within the range [0..20,000];
        string S consists only of lowercase letters (a−z).

Complexity:

        expected worst-case time complexity is O(N);
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009–2017 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 


=================================================================================================================================================================================================================
-For each middle: count max range can make palindrome
	count += range 

https://stackoverflow.com/questions/3647453/counting-palindromic-substrings-in-on

https://articles.leetcode.com/longest-palindromic-substring-part-i/
https://articles.leetcode.com/longest-palindromic-substring-part-ii/
https://www.akalin.com/longest-palindrome-linear-time

	http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/
	https://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-4/
=================================================================================================================================================================================================================
O(N^2) => có thể thành O(N*logN)


function solution(S) {
	var N = S.length;
	var maxCount = 100000000;
	var count = 0;
	var i, j;
	
	var isInt = false;
	for(var middle=0.5; middle<N; middle+=0.5) {		
		i = isInt ? middle-1 : Math.floor(middle);
		j = isInt ? middle+1 : Math.ceil(middle);	
		var startI = i;		
		while(i>=0 && j<N && S[i]===S[j]) {		
			i--;
			j++;
		}
		
		
		count += startI - i;
		
		console.log(i + " " + j + " " + middle + " " + count);
		if(count > maxCount) {
			return -1;
		}
		
		isInt = !isInt;
	}	
	
	return count;
}



solution('baababa');
=================================================================================================================================================================================================================

function solution(S) {
	var N = S.length;
	var maxCount = 100000000;
	var count = 0;
	var i, j;
	
	var isInt = false;
	for(var middle=0.5; middle<N; middle+=0.5) {		
		i = isInt ? middle-1 : Math.floor(middle);
		j = isInt ? middle+1 : Math.ceil(middle);	
		var startI = i;		
		while(i>=0 && j<N && S[i]===S[j]) {		
			i--;
			j++;
		}
				
		count += startI - i;
		
		console.log(i + " " + j + " " + middle + " " + count);
		if(count > maxCount) {
			return -1;
		}
		
		isInt = !isInt;
	}	
	
	return count;
}


// Tìm center đầu tiên, nếu chưa có thì cứ duyệt từng i => max duyệt mỗi phần tử 2 lần
// Có center đầu tiên => có right 
// Duyệt i tiếp theo
//     -Nếu i nằm trong C->R: Lấy mirror, tính P[i]. Nếu P[i] qua R => cập nhật C và R 
//     -Nếu i>=R: phải xác định chuỗi mới

function preProcess(S) {
	var N = S.length;
	
	// Transform S into T.
	// For example, S = "abba", T = "^#a#b#b#a#$".
	// ^ and $ signs are sentinels appended to each end to avoid bounds checking
	var newS = '^';
	for(var i=0; i<N; i++) {
		newS += "#" + S[i];
	}
	
	newS += "#$";
	return newS;
}

function solution(S) {
	var newS = preProcess(S);
	N = newS.length;
	var longestP = [];
	for(var i=0; i<N; i++) {
		longestP[i] = 0;
	}
	
	var right = 0;
	var center = 0;
	var maxIndex = N-1;
	for(var i=1; i<maxIndex; i++) {
		var length = right - i;
		var mirror = center - (i - center);
		
		var pi = right>i ? Math.min(length, longestP[mirror]) : 0;
		
		var ri = i + pi + 1;
		var li = i - pi - 1;
		
		// Nếu i nằm trước Ri, Pmirror <= length => thêm tối đa 1 bước
		// Nếu i nằm trước Ri, Pmirror > length => duyệt về sau, tối đa = số phần tử còn lại
		// Nếu i nằm sau Ri => duyệt về sau, tối đa = số phần tử còn lại
		// Max step = step1 + step2 + ... + số phần tử về sau = N 		
		while(newS[ri] == newS[li]) {
			pi++;
			ri++;
			li--;
		}
		
		longestP[i] = pi;
		if(ri - 1 > right) {
			center = i;
			right = ri - 1;
		}		
	}	

	// console.log(longestP);
	var count = 0;
	var maxCount = 100000000;
	for(var i=1; i<maxIndex; i++) {
		var p = longestP[i];
		count += i%2==0 ? Math.floor(p/2) : Math.ceil(p/2, 0);
		if(count >= maxCount) {
			return -1;
		}		
	}
	
	return count;
}


xbxaxaxbxaxbxa
01014103040200
2121=6

xcxaxaxbxbxbxaxa
0101210126210110


only a's, result over 100000000
✘
TIMEOUT ERROR
running time: 3.52 sec., time limit: 0.32 sec. 















































































































