
MaxDistanceMonotonic
START
Find a pair (P, Q), such that A[P] <= A[Q] and the value Q - P is maximal.





A non-empty array A consisting of N integers is given.

A monotonic pair is a pair of integers (P, Q), such that 0 ≤ P ≤ Q < N and A[P] ≤ A[Q].

The goal is to find the monotonic pair whose indices are the furthest apart. More precisely, we should maximize the value Q − P. It is sufficient to find only the distance.

For example, consider array A such that:
    A[0] = 5
    A[1] = 3
    A[2] = 6
    A[3] = 3
    A[4] = 4
    A[5] = 2

There are eleven monotonic pairs: (0,0), (0, 2), (1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (3, 3), (3, 4), (4, 4), (5, 5). The biggest distance is 3, in the pair (1, 4).

Write a function:

    function solution(A);

that, given a non-empty array A of N integers, returns the biggest distance within any of the monotonic pairs.

For example, given:
    A[0] = 5
    A[1] = 3
    A[2] = 6
    A[3] = 3
    A[4] = 4
    A[5] = 2

the function should return 3, as explained above.

Assume that:

        N is an integer within the range [1..300,000];
        each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].

Complexity:

        expected worst-case time complexity is O(N);
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009–2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

 
======================================================================================================================================================
-Chia những đoạn tăng dần
[x1,...][x2, ...][x3,...]...[xn, ...]
=> x2 < x1
   x3 < x2
   ...
   => xn < ... < x1
Nếu 1 phần tử [xi, ...]  là first thì chọn xi tốt nhất 
  
-Xét chiều ngược lại: yn 
   +Phần tử đầu tiên: yn >= xn 
		nếu xn là first thì length luôn nhỏ hơn [yn, x(n-1)] => loại xn ra => với mỗi yn, xn duyệt tối qua 1 lần => O(N)		
			Nếu yn < x(n-1) => phần tử tiếp theo 
			Nếu yn >= x(n-1) => tiếp tục loại x(n-1)
			
   +yk và xk


======================================================================================================================================================


function solution(A) {
	console.log(A);
	
	var N = A.length;
	if(N == 0) {
		return 0;
	}
	
	var firsts = [{
		index: 0,
		value: A[0]
	}];
	
	var previous = firsts[0];
	
	debugger;
	for(var i=1; i<N; i++) {	
		var a = A[i];	
		if(previous.value <= a) {
			continue;			
		}	
		
		previous = {
			index: i,
			value: a
		};		
		
		firsts.push(previous);		
	}
	
	console.log(firsts);
	
	var currentI = firsts.length-1;
	var result = 0;
	for(var j=N-1; j>=0; j--) {
		var aj = A[j];
		
		while(aj >= firsts[currentI].value) {
			result = Math.max(result, j - firsts[currentI].index);	
			if(currentI == 0) {
				break;;
			}
		
			currentI--;	
		}
	}	
	
	return result;
}

solution([ 11, 12, 10, 11, 12, 3, 2, 1, 10, 13, 12 ]);


[ { index: 0, value: 11 },
  { index: 2, value: 10 },
  { index: 5, value: 3 },
  { index: 6, value: 2 },
  { index: 7, value: 1 } ]








































