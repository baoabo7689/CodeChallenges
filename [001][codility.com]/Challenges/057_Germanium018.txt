

You are playing a game with N cards. On both sides of each card there is a positive integer. The cards are laid on the table. The score of the game is the smallest positive integer that does not occur on the face-up cards. You may flip some cards over. Having flipped them, you then read the numbers facing up and recalculate the score. What is the maximum score you can achieve?

Write a function:

    function solution(A, B);

that, given two arrays of integers A and B, both of length N, describing the numbers written on both sides of the cards, facing up and down respectively, returns the maximum possible score.

For example, given A = [1, 2, 4, 3] and B = [1, 3, 2, 3], your function should return 5, as without flipping any card the smallest positive integer excluded from this sequence is 5.

Given A = [4, 2, 1, 6, 5] and B = [3, 2, 1, 7, 7], your function should return 4, as we could flip the first card so that the numbers facing up are [3, 2, 1, 6, 5] and it is impossible to have both numbers 3 and 4 facing up.

Given A = [2, 3] and B = [2, 3] your function should return 1, as no matter how the cards are flipped, the numbers facing up are [2, 3].

Assume that:

        N is an integer within the range [1..100,000];
        each element of arrays A, B is an integer within the range [1..100,000,000];
        input arrays are of equal size.

Complexity:

        expected worst-case time complexity is O(N);
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009â€“2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================


======================================================================================================================================================

function maxArr(A) {
	var N = A.length;
	var max;
	for(var i=0; i<N; i++) {
		var a = A[i];
		max = max==undefined ? a : Math.max(a, max);
	}
	
	return max;
}

function printArr(A, n) {
	var step = 50;
	var start = n*step;
	var end = start + step;
	var str = "";
	for(var i=start; i<end && i<A.length; i++) {
		str += A[i] + ", ";
	}	
	
	console.log(str);
}

function createNode(value) {
	return {
		value: value,
				
		smallChilds: [],
		exists: [],
		
		usedBy: undefined
	};
}

function solution(A, B) {
	// console.log(A);
	// console.log(B);
	var N = A.length;		
	var nodes = [];
	var defaultUsed = [];
	var usedNumbers = [];
	
	
	//console.log("Default Used");
	// var str = "";
	for(var i=0; i<N; i++) {
		var a = A[i];
		var b = B[i];
		
		if(!nodes[a]) {
			nodes[a] = createNode(a);			
		}
		
		if(!nodes[b]) {
			nodes[b] = createNode(b);			
		}
		
		if(a == b) {
			//str += a + ", ";
			defaultUsed[a] = true;
			continue;
		}
		
		var a2 = a<b ? a : b;
		var b2 = a<b ? b : a;
				
		var nodeA = nodes[a2];
		var nodeB = nodes[b2];
		
		if(nodeB.exists[a2]) {	
			//str += a2 + ", " + b2 + ", ";
			defaultUsed[b2] = true;	
			defaultUsed[a2] = true;		
		} else {
			nodeB.exists[a2] = true;
			nodeB.smallChilds.push(nodeA);			
		}		
		
		if(b2 > N + 1) {
			//str += a2 + ", ";
			defaultUsed[a2] = true;				
		} else {		
			usedNumbers[a2] = true;				
		}
	}
	
	//console.log(str);
	//console.log("Used Numbers");
	//debugger;
	for(var i=N + 1; i>=1; i--) {
		var nodeA = nodes[i];		
		if(!nodeA) {
			continue;
		}
		
		//var str = ""; 		
		for(var j=0; j<nodeA.smallChilds.length; j++) {
			var nodeB = nodeA.smallChilds[j];
			//str += nodeB.value + "," ;
			
			if(defaultUsed[nodeA.value]) {
				defaultUsed[nodeB.value] = true;	
				defaultUsed[nodeB.usedBy] = true;			
				continue;				
			}
			
			if(defaultUsed[nodeB.value]) {
				defaultUsed[nodeA.value] = true;	
				defaultUsed[nodeA.usedBy] = true;			
				continue;						
			}
			
			if(!nodeA.usedBy && !nodeB.usedBy) {
				nodeB.usedBy = nodeA.value;				
				continue;
			}
						
			if(!nodeA.usedBy && nodeB.usedBy) {
				usedNumbers[nodeA.value] = true;	
				nodeA.usedBy = nodeB.usedBy;
				continue;
			}
			
			if(nodeA.usedBy && !nodeB.usedBy) {
				nodeB.usedBy = nodeA.usedBy;
				continue;
			}	
			
			if(usedNumbers[nodeA.usedBy]) {
				
			}
			
			// nodeA.usedBy && nodeB.usedBy
			if(nodeA.usedBy == nodeB.usedBy) {	
				usedNumbers[nodeA.value] = true;	
				usedNumbers[nodeA.usedBy] = true;		
				continue;			
			}	
			
			if(nodeA.usedBy < nodeB.usedBy) {	
				usedNumbers[nodeA.usedBy] = true;	
				nodeA.usedBy = nodeB.usedBy;	
				continue;			
			}	
			
			// nodeA.usedBy > nodeB.usedBy
			usedNumbers[nodeB.usedBy] = true;	
			nodeB.usedBy = nodeA.usedBy;			
		}	

		//console.log(nodeA.value + ": " + str);		
	}
	
	for(var i=1; usedNumbers[i] || defaultUsed[i]; i++) {}		
		
	return i;
}

solution(
[341, 254, 416, 76, 456, 12, 428, 416, 497, 296, 185, 316, 159, 356, 124, 60, 98, 491, 255, 96, 45, 375, 421, 126, 97, 360, 455, 453, 112, 500, 250, 166, 256, 167, 111, 309, 158, 127, 451, 36, 231, 337, 448, 358, 266, 46, 330, 460, 148, 136, 
4, 170, 281, 57, 2, 353, 141, 411, 262, 79, 280, 18, 186, 275, 108, 291, 340, 425, 354, 373, 178, 251, 272, 118, 293, 93, 295, 495, 66, 240, 239, 318, 22, 1, 362, 380, 194, 180, 284, 169, 492, 3, 15, 343, 434, 64, 265, 392, 303, 496, 
471, 493, 54, 188, 414, 249, 129, 334, 347, 130, 366, 100, 395, 328, 469, 212, 412, 10, 314, 484, 41, 418, 452, 283, 99, 481, 383, 217, 77, 350, 222, 317, 132, 160, 199, 311, 113, 368, 58, 305, 72, 198, 322, 248, 367, 106, 146, 137, 397, 230, 
86, 445, 476, 201, 176, 179, 419, 432, 82, 393, 277, 94, 382, 302, 304, 357, 165, 430, 325, 209, 278, 335, 140, 218, 52, 369, 386, 437, 292, 443, 156, 396, 149, 28, 273, 115, 326, 438, 253, 133, 409, 208, 405, 236, 466, 179, 327, 135, 8, 161, 
69, 19, 440, 489, 37, 88, 175, 14, 105, 48, 13, 448, 298, 242, 162, 104, 321, 378, 464, 286, 370, 400, 444, 56, 336, 308, 173, 31, 150, 203, 121, 439, 189, 260, 479, 131, 32, 470, 234, 407, 424, 80, 417, 457, 81, 238, 441, 39, 423, 433, 
151, 313, 174, 477, 329, 114, 17, 221, 306, 258, 335, 297, 38, 458, 182, 51, 288, 67, 53, 177, 62, 116, 144, 473, 153, 87, 364, 119, 24, 33, 110, 245, 120, 147, 406, 413, 183, 365, 463, 235, 6, 246, 168, 290, 315, 241, 125, 163, 465, 143, 
264, 145, 226, 480, 374, 472, 27, 287, 155, 197, 427, 216, 431, 195, 138, 59, 307, 224, 243, 420, 442, 233, 205, 270, 152, 65, 391, 30, 229, 268, 90, 63, 454, 215, 347, 214, 191, 110, 450, 95, 361, 91, 461, 475, 355, 220, 7, 289, 276, 117, 
11, 74, 459, 204, 202, 388, 279, 467, 84, 73, 377, 20, 426, 207, 171, 227, 92, 263, 261, 394, 331, 423, 344, 61, 225, 359, 339, 389, 319, 219, 385, 16, 285, 348, 109, 429, 107, 78, 490, 187, 338, 415, 435, 372, 223, 410, 384, 49, 323, 300, 
468, 154, 55, 346, 324, 342, 123, 259, 83, 34, 50, 294, 312, 301, 40, 157, 42, 486, 181, 164, 352, 282, 23, 401, 403, 267, 9, 21, 101, 488, 244, 5, 25, 134, 210, 172, 474, 213, 333, 449, 206, 228, 299, 498, 499, 269, 363, 398, 196, 102, 
310, 487, 447, 184, 485, 376, 71, 446, 43, 192, 26, 404, 422, 252, 85, 482, 75, 345, 496, 89, 381, 349, 478, 271, 387, 70, 35, 190, 139, 211, 399, 320, 44, 270, 128, 494, 371, 332, 483, 142, 247, 237, 232, 462, 483, 402, 200, 379, 68, 103]
,
[96, 109, 110, 88, 185, 14, 39, 110, 266, 165, 276, 480, 50, 472, 405, 365, 355, 304, 483, 240, 466, 252, 436, 193, 392, 344, 356, 302, 339, 298, 264, 403, 187, 191, 102, 340, 2, 263, 464, 414, 363, 115, 347, 255, 348, 312, 61, 94, 214, 351, 
151, 293, 97, 316, 152, 323, 98, 305, 122, 37, 5, 51, 43, 267, 114, 108, 10, 336, 16, 47, 174, 332, 397, 22, 13, 385, 33, 106, 379, 71, 373, 225, 45, 271, 189, 213, 442, 366, 81, 211, 292, 90, 482, 100, 450, 310, 308, 172, 382, 496, 
273, 154, 134, 315, 357, 229, 199, 394, 448, 429, 44, 42, 288, 242, 58, 75, 186, 28, 432, 139, 393, 201, 499, 248, 82, 299, 269, 488, 253, 241, 262, 322, 419, 433, 321, 443, 451, 354, 89, 147, 367, 427, 136, 374, 250, 415, 282, 135, 215, 500, 
342, 485, 473, 137, 118, 416, 35, 468, 59, 335, 208, 328, 212, 21, 476, 440, 295, 217, 216, 63, 461, 423, 431, 410, 333, 274, 138, 465, 268, 278, 111, 184, 337, 386, 4, 251, 128, 330, 446, 36, 384, 132, 301, 417, 87, 416, 338, 74, 383, 27, 
190, 418, 362, 453, 158, 237, 352, 86, 447, 390, 80, 467, 470, 177, 32, 254, 358, 140, 257, 64, 66, 125, 275, 364, 53, 1, 369, 7, 444, 272, 258, 29, 76, 238, 289, 320, 198, 173, 341, 142, 107, 494, 329, 303, 401, 15, 72, 492, 179, 380, 
156, 445, 103, 462, 38, 460, 162, 155, 163, 150, 423, 220, 218, 41, 144, 307, 11, 375, 370, 12, 60, 411, 219, 180, 121, 489, 290, 246, 402, 434, 391, 408, 324, 157, 313, 463, 479, 360, 130, 236, 376, 148, 478, 232, 126, 231, 194, 181, 204, 377, 
26, 456, 471, 346, 119, 79, 265, 407, 325, 439, 67, 116, 70, 455, 317, 256, 117, 25, 49, 260, 92, 486, 149, 483, 68, 133, 34, 283, 359, 176, 120, 105, 297, 146, 448, 311, 143, 335, 388, 175, 399, 222, 469, 285, 243, 281, 395, 182, 17, 197, 
73, 83, 371, 113, 326, 104, 314, 196, 247, 497, 343, 421, 127, 349, 477, 400, 24, 206, 188, 381, 91, 179, 171, 161, 378, 396, 435, 318, 223, 484, 420, 95, 457, 153, 129, 192, 239, 350, 221, 40, 319, 84, 183, 164, 286, 6, 306, 361, 496, 280, 
452, 169, 131, 52, 124, 244, 437, 228, 56, 261, 389, 123, 406, 209, 353, 279, 203, 227, 309, 475, 249, 491, 291, 498, 18, 245, 300, 8, 31, 210, 207, 438, 424, 3, 233, 422, 23, 413, 441, 101, 458, 78, 425, 141, 160, 224, 296, 284, 294, 112, 
145, 459, 167, 69, 430, 9, 178, 30, 159, 166, 331, 48, 85, 409, 202, 205, 234, 454, 200, 412, 474, 55, 372, 54, 65, 334, 230, 93, 277, 77, 347, 404, 426, 387, 195, 481, 20, 327, 270, 368, 168, 495, 487, 57, 270, 99, 170, 345, 287, 46])



Default Used
110 416 496 347 448 179 416 335 423 347 448 179 423 270 483 270 483



500: 298,230,
499: 452,160,
498: 401,141,
497: 266,73,
496: 323,200,
495: 106,237,
494: 80,481,
493: 154,
492: 292,39,
491: 304,282,
490: 221,
489: 453,87,
488: 217,210,
487: 459,232,
486: 233,227,
485: 445,430,
484: 139,219,
483: 255,270,
482: 15,205,
481: 299,
480: 316,346,
479: 289,183,
478: 168,372,
477: 462,171,
476: 473,304,
475: 285,164,
474: 23,381,
473: 180,
472: 356,79,
471: 273,226,
470: 298,173,
469: 58,461,
468: 432,452,
467: 448,196,
466: 45,87,
465: 437,204,
464: 451,257,
463: 413,130,
462: 57,
461: 278,
460: 94,114,
459: 371,
458: 41,206,
457: 303,285,
456: 185,145,
455: 356,195,
454: 297,345,
453: 302,
452: 
451: 113,
450: 434,388,
449: 101,
448: 347,
447: 105,167,
446: 253,30,
445: 313,
444: 275,150,
443: 311,278,
442: 194,92,
441: 72,333,
440: 357,362,
439: 29,197,
438: 330,5,
437: 123,
436: 421,
435: 339,183,
434: 33,
433: 160,380,
432: 314,
431: 140,70,
430: 217,
429: 130,192,
428: 39,
427: 198,67,
426: 127,44,
425: 336,299,
424: 107,25,
423: 335,179,
422: 172,85,
421: 20,
420: 260,385,
419: 132,35,
418: 201,19,
417: 236,329,
416: 110,179,
415: 106,84,
414: 36,357,
413: 213,
412: 186,89,
411: 305,116,
410: 218,6,
409: 384,252,
408: 245,
407: 142,287,
406: 313,312,
405: 124,301,
404: 48,320,
403: 166,18,
402: 24,99,
401: 81,
400: 125,227,
399: 361,347,
398: 284,
397: 272,215,
396: 184,359,
395: 288,7,
394: 334,381,
393: 41,335,
392: 97,172,
391: 110,34,
390: 48,
389: 318,50,
388: 104,
387: 65,270,
386: 138,28,
385: 93,
384: 306,
383: 269,8,
382: 303,212,
381: 
380: 213,
379: 66,345,
378: 140,225,
377: 143,343,
376: 6,9,
375: 252,67,
374: 248,119,
373: 47,239,
372: 164,
371: 20,
370: 66,53,
369: 274,173,
368: 354,142,
367: 72,250,
366: 180,44,
365: 60,360,
364: 56,290,
363: 231,296,
362: 189,
361: 49,
360: 344,
359: 229,
358: 255,321,
357: 
356: 
355: 98,243,
354: 16,
353: 323,40,
352: 175,249,
351: 136,
350: 241,78,
349: 207,55,
348: 266,153,
347: 
346: 52,
345: 
344: 171,
343: 100,
342: 86,244,
341: 96,234,
340: 309,10,
339: 112,
338: 327,319,
337: 115,149,
336: 53,
335: 110,
334: 70,
333: 52,
332: 251,327,
331: 91,26,
330: 61,
329: 38,
328: 242,94,
327: 
326: 128,202,
325: 216,155,
324: 120,124,
323: 
322: 317,136,
321: 199,
320: 131,
319: 223,
318: 225,
317: 138,
316: 57,
315: 188,126,
314: 279,
313: 
312: 46,
311: 214,
310: 64,145,
309: 181,
308: 265,1,
307: 51,117,
306: 163,
305: 147,
304: 
303: 
302: 21,
301: 209,
300: 280,9,
299: 
298: 
297: 220,
296: 165,
295: 33,165,
294: 123,196,
293: 170,13,
292: 268,
291: 108,23,
290: 232,
289: 182,
288: 11,
287: 68,
286: 64,223,
285: 
284: 81,
283: 248,30,
282: 146,
281: 97,220,
280: 5,
279: 157,
278: 
277: 208,139,
276: 185,17,
275: 267,
274: 
273: 4,
272: 203,
271: 1,54,
270: 
269: 224,
268: 176,
267: 245,
266: 
265: 27,
264: 250,26,
263: 127,206,
262: 122,222,
261: 188,34,
260: 238,
259: 228,
258: 121,150,
257: 
256: 187,59,
255: 
254: 109,104,
253: 77,
252: 
251: 115,
250: 
249: 229,
248: 
247: 84,168,
246: 119,148,
245: 
244: 207,
243: 49,
242: 177,
241: 231,
240: 96,71,
239: 107,
238: 15,
237: 88,
236: 235,
235: 
234: 75,
233: 210,
232: 
231: 
230: 35,
229: 
228: 78,
227: 
226: 
225: 
224: 25,
223: 
222: 91,
221: 155,
220: 
219: 144,
218: 38,
217: 
216: 116,
215: 146,
214: 148,
213: 
212: 75,
211: 169,77,
210: 
209: 63,
208: 132,
207: 
206: 
205: 149,
204: 113,
203: 42,
202: 85,
201: 137,
200: 170,
199: 129,
198: 32,
197: 117,
196: 
195: 128,
194: 125,
193: 126,
192: 166,
191: 167,143,
190: 69,93,
189: 76,
188: 
187: 40,
186: 43,
185: 
184: 69,
183: 
182: 144,
181: 163,
180: 
179: 
178: 174,71,
177: 12,
176: 118,
175: 95,
174: 103,
173: 
172: 
171: 
170: 
169: 154,
168: 
167: 
166: 
165: 
164: 
163: 
162: 32,17,
161: 27,61,
160: 
159: 50,43,
158: 2,37,
157: 147,
156: 111,151,
155: 
154: 
153: 121,
152: 2,68,
151: 4,
150: 
149: 
148: 
147: 
146: 
145: 
144: 
143: 
142: 
141: 98,
140: 
139: 
138: 
137: 135,
136: 
135: 74,
134: 54,3,
133: 36,65,
132: 
131: 55,
130: 
129: 109,
128: 
127: 
126: 
125: 
124: 
123: 
122: 
121: 
120: 90,
119: 
118: 22,
117: 
116: 
115: 
114: 108,
113: 
112: 102,
111: 102,
110: 
109: 
108: 
107: 
106: 
105: 63,
104: 
103: 46,
102: 
101: 31,
100: 42,
99: 82,
98: 
97: 
96: 
95: 16,
94: 
93: 
92: 24,
91: 
90: 3,
89: 58,
88: 76,
87: 
86: 14,
85: 
84: 
83: 74,56,
82: 59,
81: 
80: 13,
79: 37,
78: 
77: 
76: 
75: 
74: 
73: 11,
72: 
71: 
70: 
69: 
68: 
67: 
66: 
65: 
64: 
63: 
62: 60,
61: 
60: 
59: 
58: 
57: 
56: 
55: 
54: 
53: 
52: 
51: 18,
50: 
49: 
48: 
47: 
46: 
45: 22,
44: 
43: 
42: 
41: 
40: 
39: 
38: 
37: 
36: 
35: 
34: 
33: 
32: 
31: 7,
30: 
29: 
28: 10,
27: 
26: 
25: 
24: 
23: 
22: 
21: 8,
20: 
19: 
18: 
17: 
16: 
15: 
14: 12,
13: 
12: 
11: 
10: 
9: 
8: 
7: 
6: 
5: 
4: 
3: 
2: 
1: 


function createNode(value) {
	return {
		value: value,
		relations: [],
		exists: [],
		checkedRelations: false,
		
		group: undefined,
		updatedBy: undefined		
	};
}

function solution(A, B) {
	//console.log(A);
	//console.log(B);
	var N = A.length;		
	var nodes = [];
	var defaultUsed = [];
	var usedNumbers = [];
		
	//console.log("Default Used");
	// var str = "";
	for(var i=0; i<N; i++) {
		var a = A[i];
		var b = B[i];
		
		if(!nodes[a]) {
			nodes[a] = createNode(a);			
		}
		
		if(!nodes[b]) {
			nodes[b] = createNode(b);			
		}
		
		if(a == b) {
			//str += a + ", ";
			defaultUsed[a] = true;
			continue;
		}
		
		var a2 = a<b ? a : b;
		var b2 = a<b ? b : a;
				
		var nodeA = nodes[a2];
		var nodeB = nodes[b2];
		
		if(a2 > N + 1 || b2 > N + 1) {
			defaultUsed[a2] = true;	
			defaultUsed[b2] = true;		
		}
		
		if(nodeA.exists[b2]) {
			//str += a2 + ", " + b2 + ", ";
			defaultUsed[a2] = true;	
			defaultUsed[b2] = true;					
		} else {
			nodeA.exists[b2] = true;
			nodeA.relations.push(nodeB);		
		}
		
		if(nodeB.exists[a2]) {	
			//str += a2 + ", " + b2 + ", ";
			defaultUsed[a2] = true;	
			defaultUsed[b2] = true;		
		} else {
			nodeB.exists[a2] = true;
			nodeB.relations.push(nodeA);			
		}		
	}
	
	//console.log(str);
	debugger;
	for(var i=N + 1; i>=1; i--) {
		var nodeA = nodes[i];		
		
		if(!nodeA || nodeA.checkedRelations) {
			continue;
		}
			
		var valueA = nodeA.value;
		var nexts = [nodeA];
		while(nexts.length) {
			var temp = [];
			for(var k=0; k<nexts.length; k++) {
				var next = nexts[k];
				if(next.checkedRelations) {
					continue;
				}
				
				if(defaultUsed[next.value]) {
					defaultUsed[valueA] = true;
				}
				
				for(var j=0; j<next.relations.length; j++) {
					var relation = next.relations[j];
					if(relation.updatedBy && relation.updatedBy != next.value && relation.value != next.updatedBy) {
						usedNumbers[valueA] = true;							
					} else {
						relation.updatedBy = next.value;						
					}
					
					if(relation.checkedRelations) {
						continue;
					}
				
					relation.group = valueA;
					
					usedNumbers[relation.value] = true;					
					temp.push(relation);
				}		

				next.group = valueA;
				next.checkedRelations = true;				
			}
			
			nexts = temp;
		}
	}
	
	for(var i=1; usedNumbers[i] || defaultUsed[i]; i++) {}		
		
	return i;
}


solution ([1, 1], [3, 2]);
solution ([ 2, 2, 3, 3, 4 ], [ 1, 3, 4, 5, 5 ]);
solution ([ 1, 5, 2, 3, 4 ], [ 4, 1, 2, 5, 3 ]);












