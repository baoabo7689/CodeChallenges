BreakTheRope
START
Find the maximum number of ropes that can be attached in order, without breaking any of the ropes.


In a room there are N ropes and N weights. Each rope is connected to exactly one weight (at just one end), and each rope has a particular durability − the maximum weight that it can suspend.

There is also a hook, attached to the ceiling. The ropes can be attached to the hook by tying the end without the weight. The ropes can also be attached to other weights; that is, the ropes and weights can be attached to one another in a chain. A rope will break if the sum of weights connected to it, directly or indirectly, is greater than its durability.

We know the order in which we want to attach N ropes. More precisely, we know the parameters of the rope (durability and weight) and the position of each attachment. Durabilities, weights and positions are given in three arrays A, B, C of lengths N. For each I (0 ≤ I < N):

        A[I] is the durability of the I-th rope,
        B[I] is the weight connected to the I-th rope,
        C[I] (such that C[I] < I) is the position to which we attach the I-th rope; if C[I] equals −1 we attach to the hook, otherwise we attach to the weight connected to the C[I]-th rope.

The goal is to find the maximum number of ropes that can be attached in the specified order without breaking any of the ropes.

Write a function:

    function solution(A, B, C);

that, given three arrays A, B, C of N integers, returns the maximum number of ropes that can be attached in a given order.

For example, given the following arrays:
    A[0] = 5    B[0] = 2    C[0] = -1
    A[1] = 3    B[1] = 3    C[1] = 0
    A[2] = 6    B[2] = 1    C[2] = -1
    A[3] = 3    B[3] = 1    C[3] = 0
    A[4] = 3    B[4] = 2    C[4] = 3

the function should return 3, as if we attach a fourth rope then one rope will break, because the sum of weights is greater than its durability (2 + 3 + 1 = 6 and 6 > 5).

Given the following arrays:
    A[0] = 4    B[0] = 2    C[0] = -1
    A[1] = 3    B[1] = 2    C[1] = 0
    A[2] = 1    B[2] = 1    C[2] = 1

the function should return 2, as if we attach a third rope then one rope will break, because the sum of weights is greater than its durability (2 + 2 + 1 = 5 and 5 > 4).

Assume that:

        N is an integer within the range [0..100,000];
        each element of array A is an integer within the range [1..1,000,000];
        each element of array B is an integer within the range [1..5,000];
        each element of array C is an integer such that −1 ≤ C[I] < I, for each I (0 ≤ I < N).

Complexity:

        expected worst-case time complexity is O(N*log(N));
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009–2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 
======================================================================================================================================================
-Length: logN
-Check thỏa: N 

======================================================================================================================================================

function createNode(i, a, b, c) {
	return {
		a: a,
		b: b,
		c: c,
		i: i,
		parentNode: undefined,
		sumC: b
	};
}

function solution(A, B, C) {
	var N = A.length;
	if(N == 0) {
		return 0;
	}
	
	var nodes = [];
	console.log(A);
	console.log(B);
	console.log(C);	
				
	for(var i=0; i<N; i++) {
		var a = A[i];
		var b = B[i];
		var c = C[i];
		var node = createNode(i, a, b, c);		
		nodes[i] = node;		
		
		if(c == -1) {
			continue;
		}
		
		if(c > i) {
			// Invalid data, phần tử thứ i phải nối tới phần tử nhỏ hơn i
			return -1;
		}
		
		node.parentNode = nodes[c];
	}
	
	var result = 0;
	var left = 0;
	right = N-1;
	debugger;
	while(left <= right) {
		var middle = Math.floor((left + right) / 2);
		var mNode = nodes[middle];
		
		var isValidTree = true;
		
		for(var i=0; i<=middle; i++) {
			var node = nodes[i];
			node.sumC = node.b;
			if(node.sumC > node.a) {
				isValidTree = false;
			}
		}
		
		if(isValidTree) {		
			for(var i=middle; i>=0; i--) {
				var node = nodes[i];
				if(node.parentNode == undefined) {
					continue;
				}
				
				node.parentNode.sumC += node.sumC;
				if(node.parentNode.sumC > node.parentNode.a) {
					isValidTree = false;
					break;
				}
			}
		}
		
		if(isValidTree) {
			result = middle + 1;
			left = middle + 1;
		} else {
			right = middle - 1;
		}
	}
		
	return result;
}



solution ([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);




solution ([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);














































