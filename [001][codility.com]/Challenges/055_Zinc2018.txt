

Kate was given a birthday gift of three theater tickets. Now she is browsing the theater program for the next N days. On the program, performances are named by integers. Every day, one performance is staged. Kate wants to choose three days (not necessarily consecutive) to go to the theater.

In how many ways can she use her tickets? Two ways are different if the sequences of watched performances are different. Kate likes the theater, so she may watch one performance more than once. For example, if N = 4 and theater program looks as following: [1, 2, 1, 1], Kate has four possibilities to choose the dates: [1, 2, 1, 1], [1, 2, 1, 1], [1, 2, 1, 1], and [1, 2, 1, 1], but they create only three different sequences: (1, 2, 1), (1, 1, 1) and (2, 1, 1). The correct answer for this example is 3. Notice that the order of performances matters, so the first and the last sequences are considered different.

Write a function:

    function solution(A);

that, given an array A consisting of N integers, denoting names of performances for the next N days, returns the number of possible ways to spend the tickets. Since the answer can be very large, provide it modulo 109 + 7 (1,000,000,007).

For example, given A = [1, 2, 1, 1], the function should return 3 as exmplained above.

Given A = [1, 2, 3, 4], the function should return 4. There are four ways to spend tickets: (1, 2, 3), (1, 2, 4), (1, 3, 4) and (2, 3, 4).

Given A = [2, 2, 2, 2], the function should return 1. There is only one way to spend tickets: (2, 2, 2).

Given A = [2, 2, 1, 2, 2], the function should return 4. There are four ways to spend tickets: (1, 2, 2), (2, 1, 2), (2, 2, 1) and (2, 2, 2).

Given A = [1, 2], the function should return 0. Kate cannot use all three tickets in only two days.

Assume that:

        N is an integer within the range [0..100,000];
        each element of array A is an integer within the range [1..N].

Complexity:

        expected worst-case time complexity is O(N);
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009â€“2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================

function solution(A) {
	//console.log(A);
	
	var N = A.length;
	if(N < 2) {
		return 0;
	}
	
	if(N == 3) {
		return 1;
	}
			
	var countNumber = [];
	var kindsOfNumber = 0;
	var maxKindx1 = [];
	for(var i=N-1; i>=0; i--) {
		var n = A[i];
		if(countNumber[n]) {
			countNumber[n]++;			
		} else {	
			kindsOfNumber++;
			countNumber[n] = 1;		
		}	
		
		maxKindx1[i] = kindsOfNumber;		
	}	
		
	var maxKindx2 = [];
	for(var i=N-2; i>=0; i--) {		
		maxKindx2[i] = maxKindx1[i + 1];			
	}
	
	var countDiffs = [];
	for(var i=0; i<=N; i++) {
		countDiffs[i] = 0;
	}
	
	var maxKindx2Sum = [];
	var sumDiff = 0;
	for(var i=N-2; i>=0; i--) {		
		var n = A[i];
		maxKindx2Sum[i] = sumDiff - countDiffs[n] +  maxKindx2[i];	
		
		sumDiff = maxKindx2Sum[i];
		countDiffs[n] = maxKindx2[i];			
	}
	
	//console.log(maxKindx2Sum);
	
	var maxKindx3 = [];
	for(var i=N-3; i>=0; i--) {		
		maxKindx3[i] = maxKindx2Sum[i + 1];			
	}
	
	
	var maxKindx3Sum = [];
	var sumDiff = 0;
	for(var i=0; i<=N; i++) {
		countDiffs[i] = 0;
	}
	
	var maxValue = 1000000007;
	for(var i=N-3; i>=0; i--) {		
		var n = A[i];
		maxKindx3Sum[i] = (sumDiff - countDiffs[n] +  maxKindx3[i] + maxValue) % maxValue;	
		
		sumDiff = maxKindx3Sum[i];
		countDiffs[n] = maxKindx3[i];			
	}
	
	//console.log(maxKindx3Sum);
	return sumDiff;
}



solution([ 27,  16,  5,  11,  1,  21,  12,  6,  28,  19,  9,  10,  30,  18,  29,  25,  13,  3,  26,  8,  23,  22,  20,  4,  24,  2,  7,  17,  14,  15 ]);



[ 27,  16,  5,  11,  1,  21,  12,  6,  28,  19,  9,  10,  30,  18,  29,  25,  13,  3,  26,  8,  23,  22,  20,  4,  24,  2,  7,  17,  14,  15 ]

[ 18,  6,  12,  11,  1,  15,  5,  21,  26,  7,  16,  25,  30,  24,  4,  19,  28,  3,  29,  17,  22,  8,  14,  23,  20,  10,  2,  27,  9,  13 ]


Optimize:


function solution(A) {
	var N = A.length;
	if(N < 2) {
		return 0;
	}
	
	if(N == 3) {
		return 1;
	}
			
	var countNumber = [];
	var kindsOfNumber = 0;
	var maxKindx1 = [];
	for(var i=N-1; i>=0; i--) {
		var n = A[i];
		if(!countNumber[n]) {	
			kindsOfNumber++;
			countNumber[n] = true;		
		}	
		
		maxKindx1[i] = kindsOfNumber;		
	}	
			
	var countDiffs = [];
	for(var i=0; i<=N; i++) {
		countDiffs[i] = 0;
	}
	
	var maxKindx2 = [];
	var sumDiff = 0;
	for(var i=N-2; i>=0; i--) {		
		var n = A[i];
		var sum = sumDiff - countDiffs[n] +  maxKindx1[i + 1];	
		maxKindx2[i] = sum;			
		sumDiff = sum;
		countDiffs[n] = maxKindx1[i + 1];			
	}
			
	var maxKindx3 = [];
	var sumDiff = 0;
	for(var i=0; i<=N; i++) {
		countDiffs[i] = 0;
	}
	
	var maxValue = 1000000007;
	for(var i=N-3; i>=0; i--) {		
		var n = A[i];
		var sum = (sumDiff - countDiffs[n] +  maxKindx2[i + 1] + maxValue) % maxValue;	
		maxKindx3[i] = sum;		
		sumDiff = sum;
		countDiffs[n] = maxKindx2[i + 1];			
	}
	
	return sumDiff;
}













































































