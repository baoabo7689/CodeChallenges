
LongestNonnegativeSumSlice

You are given an array A consisting of the integers −1, 0 and 1. A slice of that array is any pair of integers (P, Q) such that 0 ≤ P ≤ Q < N. Your task is to find the longest slice of A whose elements yield a non-negative sum.

Write a function:

    function solution(A);

that, given an array A of length N, consisting only of the values −1, 0, 1, returns the length of the longest slice of A that yields a non-negative sum. If there's no such slice, your function should return 0.

For example, given A = [−1, −1, 1, −1, 1, 0, 1, −1, −1], your function should return 7, as the slice starting at the second position and ending at the eighth is the longest slice with a non-negative sum.

For another example, given A = [1, 1, −1, −1, −1, −1, −1, 1, 1] your function should return 4: both the first four elements and the last four elements of array A are longest valid slices.

Assume that:

        N is an integer within the range [2..100,000];
        each element of array A is an integer within the range [−1..1].

Complexity:

        expected worst-case time complexity is O(N*log(N));
        expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Copyright 2009–2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================


Prefix Sum 
=>  First
	Last 
=> Max

function solution(A) {
	//console.log(A);
	var N = A.length;
	
	var prefixSums = [];
	var sum = 0;
	for(var i=0; i<N; i++) {
		var a = A[i];
		sum += a;
		prefixSums[i] = sum;
	}
	
	if(sum >=0) {
		return N;
	}
	
	var first = [];
	for(var i=0; i<N; i++) {
		var a = prefixSums[i];
		if(!first[a]) {
			first[a] = i + 1;
		}
	}
	
	//console.log(prefixSums);
	//console.log(first);
	
	var maxLength = 0;
	for(var i=0; i<N; i++) {
		var a = prefixSums[i];
		if(a >= 0) {
			maxLength = i+1;
		} else {
			maxLength = Math.max(maxLength, i-first[a]+1);
		}
	}
	
	return maxLength;
}



solution([0, -1, 0, 0, 1, 0, -1, -1]);

got 5 expected 6
[ 0, -1, 0, 0, 1, 0, -1, -1 ]
[ 0, -1, -1, -1, 0, 0, -1, -2 ]
[ 1, '-1': 2, '-2': 8 ]
[ 6, '-2': 8, '-1': 7 ]




got 34 expected 35
[ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 ]
  
[ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10,  10,
  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,
  10,  10,  10,  9,  8,  7,  6,  5,  4,  3,  2,
  1,  0,  -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9,
  -10,  -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,  -20 ]
  
[ 35,  1,  2,  3,  4,  5,  6,  7,  8,
  9,  10,  '-1': 36,  '-2': 37,  '-3': 38,  '-4': 39,  '-5': 40,  '-6': 41,  '-7': 42,  '-8': 43,  '-9': 44,
  '-10': 45,  '-11': 46,  '-12': 47,  '-13': 48,  '-14': 49,  '-15': 50,  '-16': 51,  '-17': 52,  '-18': 53,  '-19': 54,  '-20': 55 ]
  
[ 35,  34,  33,  32,  31,  30,  29,  28,  27,  26,  25,
  '-20': 55,  '-19': 54,  '-18': 53,  '-17': 52,  '-16': 51,  '-15': 50,  '-14': 49,  '-13': 48,  '-12': 47,
  '-11': 46,  '-10': 45,  '-9': 44,  '-8': 43,  '-7': 42,  '-6': 41,  '-5': 40,  '-4': 39,  '-3': 38,  '-2': 37,  '-1': 36 ]





1 1 1 
1 2 3 
1 2 3 
1 2 3 
1 1 1

-1 -1 1 1 1 
-1 -2 -1 0 1
4 5, 1 2 
4 5, 3 2
















