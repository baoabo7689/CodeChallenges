

Integers K, M and a non-empty array A consisting of N integers, not bigger than M, are given.

The leader of the array is a value that occurs in more than half of the elements of the array, and the segment of the array is a sequence of consecutive elements of the array.

You can modify A by choosing exactly one segment of length K and increasing by 1 every element within that segment.

The goal is to find all of the numbers that may become a leader after performing exactly one array modification as described above.

Write a function:

    function solution(K, M, A);

that, given integers K and M and an array A consisting of N integers, returns an array of all numbers that can become a leader, after increasing by 1 every element of exactly one segment of A of length K. The returned array should be sorted in ascending order, and if there is no number that can become a leader, you should return an empty array. Moreover, if there are multiple ways of choosing a segment to turn some number into a leader, then this particular number should appear in an output array only once.

For example, given integers K = 3, M = 5 and the following array A:
  A[0] = 2
  A[1] = 1
  A[2] = 3
  A[3] = 1
  A[4] = 2
  A[5] = 2
  A[6] = 3

the function should return [2, 3]. If we choose segment A[1], A[2], A[3] then we get the following array A:
  A[0] = 2
  A[1] = 2
  A[2] = 4
  A[3] = 2
  A[4] = 2
  A[5] = 2
  A[6] = 3

and 2 is the leader of this array. If we choose A[3], A[4], A[5] then A will appear as follows:
  A[0] = 2
  A[1] = 1
  A[2] = 3
  A[3] = 2
  A[4] = 3
  A[5] = 3
  A[6] = 3

and 3 will be the leader.

And, for example, given integers K = 4, M = 2 and the following array:
  A[0] = 1
  A[1] = 2
  A[2] = 2
  A[3] = 1
  A[4] = 2

the function should return [2, 3], because choosing a segment A[0], A[1], A[2], A[3] and A[1], A[2], A[3], A[4] turns 2 and 3 into the leaders, respectively.

Write an efficient algorithm for the following assumptions:

        N and M are integers within the range [1..100,000];
        K is an integer within the range [1..N];
        each element of array A is an integer within the range [1..M].

Copyright 2009–2019 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================
count từng number vào mảng 
loop k, nếu leader => bật cờ, push vào, sort 


(1, 100000, [99999,100000,99999])
(4, 20, [10,10,11,10,11,11,9,11,10])

2 3 3 2 2 
(2, 100000, [100000,100000,100000])

======================================================================================================================================================
// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(K, M, A) {
    console.log(K + ":" + M + ":" + A);
    // write your code in JavaScript (Node.js 8.9.4)
    var N = A.length;
    var midN = Math.floor(N/2);
    var counts = [];
    var leader = undefined;
    for(var i=0; i<N; i++) {
        var a = A[i];
        counts[a] = counts[a] == undefined ? 1 : counts[a] + 1;
        if(counts[a] > midN) {
            leader = a;
        }
    }
    
    var exists = [];
    var result = [];
    
    //console.log(leader);
    //console.log("counts: " + counts);
    //console.log("midN: " + midN);
    for(var i=0; i<N; i++) {
		var prev = undefined;
        if(i >= K) {
            // revert ++ last i-K
            counts[A[i-K]]--;
            A[i-K]--;
            
            prev = A[i-K];
            counts[prev]++;
        }
        
        var oldA = A[i];
        var newA = oldA + 1;
        
        A[i] = newA;
        counts[oldA]--;
        counts[newA] = counts[newA]==undefined ? 1 : counts[newA]+1;
        
        //console.log(oldA + ":" + newA);
        //console.log("A: " + A);
        //console.log("counts: " + counts);
        
        if(i<K-1) {
			continue;
		}
		
        if(leader != newA && !exists[leader] && counts[leader] > midN){
            exists[leader] = true;
            result.push(leader);
        }
        
        if(!exists[newA] && counts[newA] > midN) {
            exists[newA] = true;
            result.push(newA);
        }
            
		if(prev != undefined && !exists[prev] && counts[prev] > midN) {
			exists[prev] = true;
			result.push(prev);
		}
        
        //console.log("result: " + result);
    }
    
    //console.log(result);
    result = result.sort(function(a, b){return a-b});
    return result;
}


























































