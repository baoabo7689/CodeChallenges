


A positive integer N is given. Consider the sequence of numbers [0, 1, ..., N]. What is the total number of zeros in the decimal representations of these numbers?

N can be very large. Hence, it is given in the form of a non-empty string S of length L, containing a decimal representation of N. S contains no leading zeros.

Write a function:

    function solution(S);

that, given a string S, which is a decimal representation of some positive integer N, returns the total number of zeros in the decimal representations of numbers [0, 1, ..., N]. If the result exceeds 1,410,000,016, the function should return the remainder from the division of the result by 1,410,000,017.

For example, for S="100" the function should return 12 and for S="219" it should return 42.

Assume that:

        L is an integer within the range [1..10,000];
        string S consists only of digits (0−9);
        string S contains no leading zeros.

Complexity:

        expected worst-case time complexity is O(L);
        expected worst-case space complexity is O(L) (not counting the storage required for input arguments).

Copyright 2009–2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

======================================================================================================================================================
*C1:
-number_of_zero(10N + 9) = (number_of_zero(N) - 1)*10 + (N+1)
	.Với 1 số N1 > N: xét số tận cùng = a1 => N1=b1a1 => b1 <= (10N+9-a1)/10<N => từ N số có thể tạo 10N+9 số = cách thêm vào tận cùng của từng số (1->9) + number_of_zero(N) - 1
	.Với 1 số 0 < N1 <= N: có thể tạo 10 số N10, N11, N12, ..., N19 => tạo (number_of_zero(N) - 1)*10 (không xét 0)
	Vị trí cuối = 0 có N+1 số
	=> number_of_zero(10N + 9) = (number_of_zero(N) - 1)*10 + (N+1) 
-number_of_zero(10N + C) = (number_of_zero(N) - 1)*10 + (N+1) - (9-C)*Z


*C2
S='a1a2...'
[a1]
	=0: số số 0     = phần nguyên sau + [a2...]
		phần nguyên = phần nguyên sau
	=1: số số 0     = (1->999...) + [a2...] + i-1
		phần nguyên = a1*10... + phần nguyên sau
	=x: số số 0     = (1->999...) + (1->999....+ số số 0 padding đầu)*(x-1) + [a2...] + i-1
		phần nguyên = a1*10... + phần nguyên sau
[1->10^n-1]
	


======================================================================================================================================================

function solution(S) {
	var L = S.length;
	var mod = 1410000017;
	
	
	var nonleadings = [0, 1];
	var multiply = 10;
	for(var i=2; i<L; i++) {
		nonleadings[i] = nonleadings[i-1]*9 + ;
		
		multiply = (multiply*10) % mod;
	}

	console.log(nonleadings);	
}

solution('10000');

























































































































======================================================================================================================================================

function solution(S) {
	var mod = 1410000017;
	var L = S.length;
	var maxIndex = L-1;
	
	var multipliers = 100;
	
	var numberCounts = [0, 9];
	var zeroCounts = [0, 1];
	
	for(var i=2; i<L; i++) {
		numberCounts[i] = (multipliers - 1 + mod) % mod;
		zeroCounts[i] = (zeroCounts[i-1]*9 + numberCounts[i-1]) % mod; 
		
		multipliers = (multipliers*10) % mod;
	}
	
	console.log(numberCounts);
	console.log(zeroCounts);
	var result = 1;
	
	for(var i=0; i<L; i++) {
		var digit = parseInt(S[i]);
		if(digit === 0) {
			continue;
		}
		
		var diff = L - i - 1;
		result = (result + digit * zeroCounts[diff]  + diff) % mod; 
		
		console.log(digit);
		console.log("Count: " + zeroCounts[L - i - 1]);
		console.log("Result: " + result);
	}
	
	
	return result;
}



solution('100');


S=100
0 10 20 30 40 50 60 70 80 90 100


































