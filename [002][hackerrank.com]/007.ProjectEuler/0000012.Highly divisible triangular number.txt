The sequence of triangle numbers is generated by adding the natural numbers. So the 'th triangle number would be . The first ten terms would be:


Let us list the factors of the first seven triangle numbers:

 
 
 
 
 
 

We can see that  is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over  divisors?

Input Format

First line , the number of testcases. Each testcase consists of  in one line.

Constraints

Output Format

For each testcase, print the required answer in one line.

Sample Input

4
1
2
3
4
Sample Output

3
6
6
28
Explanation

Explained in statement.



======================================================================================================================================================

Nth = N(N+1)/2

N(N+1)/2 c√≥ N divisors 

hint : if the prime factors of a number is a^n , b^m , c^q then the number of divisors is (n+1)(m+1)(q+1)




======================================================================================================================================================
using System;
using System.Collections.Generic;
using System.IO;
class Solution {
    static Dictionary<int, int> Factors(int n) {
        var sqrt = Math.Sqrt(n);
        var count = 1;
        var factors = new Dictionary<int, int>();
        
        for(var i=2; i<=sqrt && n>1; i++) {
            if(n%i == 0) {
                var c = 0;
                while(n%i == 0) {
                    n /= i;
                    c++;
                }            
            
                factors.Add(i, c);
            }
        }
              
        if(n > 1) {
            factors.Add(n, 1);
        }
        
        return factors;
    }
    
    static void Main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        int t = Convert.ToInt32(Console.ReadLine());
        for(int a0 = 0; a0 < t; a0++){
            int n = Convert.ToInt32(Console.ReadLine());
            
            var result = 0;
            
            var prevFactors = new Dictionary<int, int>();
            
            for(var i=1; ;i++) {
                var nextFactors = Factors(i+1);
                var count = 1;
                
                foreach(var p in prevFactors) {
                    var s = nextFactors.ContainsKey(p.Key) ? p.Value + nextFactors[p.Key] + 1 : p.Value + 1;
                    if(p.Key == 2) {
                        s--;
                    }
                    
                    count *= s;
                }
                
                foreach(var p in nextFactors) {
                    if(prevFactors.ContainsKey(p.Key)) {
                        continue;
                    } 
                    
                    var s = p.Value + 1;
                    if(p.Key == 2) {
                        s--;
                    }
                    
                    count *= s; 
                }
                
                prevFactors = nextFactors;
                
                        
                //Console.WriteLine("count: " + count);
                if(count > n) {
                    result = i*(i+1)/2;
                    break;
                }
            }            
                        
            Console.WriteLine(result);
        }       
        
    }
}




















