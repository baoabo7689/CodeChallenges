If we list all the natural numbers below that are multiples of or , we get and . The sum of these multiples is .

Find the sum of all the multiples of or below .

Input Format

First line contains that denotes the number of test cases. This is followed by lines, each containing an integer, .

Constraints

Output Format

For each test case, print an integer that denotes the sum of all the multiples of or below .

Sample Input 0

2
10
100

Sample Output 0

23
2318

Explanation 0

For , if we list all the natural numbers below that are multiples of or , we get and . The sum of these multiples is .

Similarly for , we get . 



======================================================================================================================================================
a1 = 3k1 + r1
=> (a1-15)%3 = a1%3
   (a1-15)%5 = a1%5
   
s=s0

2318- 30 - 45*6 - 4*15*6

3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10 = 33


0, 3, 5, 6, 9, 10, 12 =  45 + 7*15*0
15, 18, 20, 21, 24, 25, 27= 45 + 7*15*1
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10, 12=45
3, 5, 6, 9, 10 = 33

sum += initSum*ranges + (ranges-1)*ranges/2*7*15;


======================================================================================================================================================
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;

class Solution {
    static int initSum = 45;
    // static int[] initArr = new int[] { 0, 3, 5, 6, 9, 10, 12 };
   
    static void Main(String[] args) {
        int t = Convert.ToInt32(Console.ReadLine());
        for(int a0 = 0; a0 < t; a0++){
            int n = Convert.ToInt32(Console.ReadLine());
            Euler(n);
        }
    }
    
    static void Euler(int n) {
        var bcnn = 15;
        var ranges = n/bcnn;
        // 0 1 ... [ranges-1]
        BigInteger sum = 0;
        
        if(ranges > 0) {
            sum = ranges-1;
            sum *= 7*15;
            sum += initSum*2;
            sum *= ranges;
            sum /= 2;
        }
        
        
        var mod = n%bcnn;
        var initI = bcnn*ranges;
        for(var i=0; i<mod; i++) {
            if(i%3==0 || i%5==0) {
                sum +=  i;    
                sum +=  initI;               
            }
        }
        
        Console.WriteLine(sum);
    }
}


























