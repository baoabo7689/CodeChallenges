You are given  triangles, specifically, their sides ,  and . Print them in the same style but sorted by their areas from the smallest one to the largest one. It is guaranteed that all the areas are different.

The best way to calculate a volume of the triangle with sides ,  and  is Heron's formula:

 where .

Input Format

First line of each test file contains a single integer .  lines follow with ,  and  on each separated by single spaces.

Constraints

, and 
Output Format

Print exactly  lines. On each line print  integers separated by single spaces, which are ,  and  of the corresponding triangle.

Sample Input 0

3
7 24 25
5 12 13
3 4 5
Sample Output 0

3 4 5
5 12 13
7 24 25
Explanation 0

The square of the first triangle is . The square of the second triangle is . The square of the third triangle is . So the sorted order is the reverse one.


======================================================================================================================================================


======================================================================================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct triangle
{
	int a;
	int b;
	int c;
};

typedef struct triangle triangle;

int area(triangle t) {
    int a = t.a;
    int b = t.b;
    int c = t.c;
    int r = (a+b+c)*(a-b+c)*(a+b-c)*(-a+b+c);
    return r;    
}

void swap(triangle* a,triangle* b)
{
    triangle temp=*a;
    *a=*b;
    *b=temp;
}

void sort_by_area(triangle* tr, int n) {
	/**
	* Sort an array a of the length n
	*/
    for(int i=0; i<n; i++) {
        int a = area(tr[i]);
        int swapped=0;
        
        for(int j=0;j<n-i-1;j++)
        {
            int a1 = area(tr[j]);
            int a2 = area(tr[j+1]);
            
            if(a1 > a2) {
                swap(&tr[j],&tr[j+1]);
                swapped=1;
            }
        }
        
        if(swapped==0) {
            break;            
        }
    }
}

int main()
{
	int n;
	scanf("%d", &n);
	triangle *tr = malloc(n * sizeof(triangle));
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d", &tr[i].a, &tr[i].b, &tr[i].c);
	}
	sort_by_area(tr, n);
	for (int i = 0; i < n; i++) {
		printf("%d %d %d\n", tr[i].a, tr[i].b, tr[i].c);
	}
	return 0;
}




























