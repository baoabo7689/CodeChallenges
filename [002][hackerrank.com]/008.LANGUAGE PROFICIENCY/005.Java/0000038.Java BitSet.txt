Java's BitSet class implements a vector of bit values (i.e.:  () or  ()) that grows as needed, allowing us to easily manipulate bits while optimizing space (when compared to other collections). Any element having a bit value of  is called a set bit.

Given  BitSets,  and , of size  where all bits in both BitSets are initialized to , perform a series of  operations. After each operation, print the number of set bits in the respective BitSets as two space-separated integers on a new line.

Input Format

The first line contains  space-separated integers,  (the length of both BitSets  and ) and  (the number of operations to perform), respectively. 
The  subsequent lines each contain an operation in one of the following forms:

AND 
OR 
XOR 
FLIP
SET 
In the list above,  is the integer  or , where  denotes  and  denotes . 
 is an integer denoting a bit's index in the BitSet corresponding to .

For the binary operations , , and , operands are read from left to right and the BitSet resulting from the operation replaces the contents of the first operand. For example:

AND 2 1
 is the left operand, and  is the right operand. This operation should assign the result of  to .

Constraints

Output Format

After each operation, print the respective number of set bits in BitSet  and BitSet  as  space-separated integers on a new line.

Sample Input

5 4
AND 1 2
SET 1 4
FLIP 2 2
OR 2 1
Sample Output

0 0
1 0
1 1
1 2
Explanation

Initially: , , , and . At each step, we print the respective number of set bits in  and  as a pair of space-separated integers on a new line.

 
 
,  
The number of set bits in  and  is .

 
Set  to  (). 
, . 
The number of set bits in  is  and  is .

 
Flip  from  () to  (). 
, . 
The number of set bits in  is  and  is .

 
. 
, . 
The number of set bits in  is  and  is .




======================================================================================================================================================

======================================================================================================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    private static int countSet(long B) {
        int count = 0;
        while(B > 0) {
            if(B%2 == 1) {
               count++;   
            }
            
            B /= 2;  
        }

        return count;
    }
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int M = in.nextInt();

        long B1 = 0;
        long B2 = 0;

        for(int i=0; i<M; i++) {
            in.nextLine();
            String op = in.next();

            if(op.equals("AND")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1 = B1&B2;
                } else {
                    B2 = B2&B1;
                }
            } else if(op.equals("OR")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1 = B1|B2;
                } else {
                    B2 = B2|B1;
                }
            } else if(op.equals("SET")) {
                int x = in.nextInt();
                long y = (long) Math.pow(2, in.nextInt());

                if(x == 1) {
                    B1 = B1|y;
                } else {
                    B2 = B2|y;
                }
            } else if(op.equals("FLIP")) {
                int x = in.nextInt();
                long y = (long) Math.pow(2, in.nextInt());

                if(x == 1) {
                    B1 = B1^y;
                } else {
                    B2 = B2^y;
                }
            } else if(op.equals("XOR")) {
                int x = in.nextInt();

                if(x == 1) {
                    B1 = B1^B2;
                } else {
                    B2 = B2^B1;
                }
            }

            System.out.println(countSet(B1) + " " + countSet(B2));
        }
    }
}
======================================================================================================================================================

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int M = in.nextInt();

        BitSet B1 = new BitSet(N);
        BitSet B2 = new BitSet(N);

        for(int i=0; i<M; i++) {
            in.nextLine();
            String op = in.next();

            if(op.equals("AND")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1.and(B2);
                } else {
                    B2.and(B1);
                }
            } else if(op.equals("OR")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1.or(B2);
                } else {
                    B2.or(B1);
                }
            } else if(op.equals("SET")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1.set(y);
                } else {
                    B2.set(y);
                }
            } else if(op.equals("FLIP")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1.flip(y);
                } else {
                    B2.flip(y);
                }
            } else if(op.equals("XOR")) {
                int x = in.nextInt();
                int y = in.nextInt();

                if(x == 1) {
                    B1.xor(B2);
                } else {
                    B2.xor(B1);
                }
            }

            System.out.println(B1.cardinality() + " " + B2.cardinality());
        }
    }
}
























































