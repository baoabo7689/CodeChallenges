Given a sequence of integers, where each element is distinct and satisfies . For each where , find any integer such that and print the value of on a new line.

For example, assume the sequence . Each value of between and , the length of the sequence, is analyzed as follows:

    , so
    , so
    , so
    , so
    , so

The values for are .

Function Description

Complete the permutationEquation function in the editor below. It should return an array of integers that represent the values of .

permutationEquation has the following parameter(s):

    p: an array of integers

Input Format

The first line contains an integer , the number of elements in the sequence.
The second line contains space-separated integers where .

Constraints

    , where .
    Each element in the sequence is distinct.

Output Format

For each from to , print an integer denoting any valid satisfying the equation on a new line.

Sample Input 0

3
2 3 1

Sample Output 0

2
3
1

Explanation 0

Given the values of , , and , we calculate and print the following values for each from to :

    , so we print the value of on a new line.
    , so we print the value of on a new line.
    , so we print the value of on a new line.

Sample Input 1

5
4 3 5 1 2

Sample Output 1

1
3
5
4
2







======================================================================================================================================================

======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the permutationEquation function below.
    static int[] permutationEquation(int[] p) {
        var n = p.Length;
        var reverse = new int[n];
        var valueByIndex = new int[n+1];
            
        for(var i=0; i<n; i++) {
            var pI = p[i];
            reverse[pI%n] = i;
            valueByIndex[pI] = i + 1;
        }
        
        Console.WriteLine(string.Join(",", reverse));
        Console.WriteLine(string.Join(",", valueByIndex));
        
        var result = new int[n];
        for(var i=1; i<=n; i++) {
            var mod = i%n;
            var r = reverse[mod] + 1;
            Console.WriteLine(mod + "-" + r);
            result[i-1] = valueByIndex[r];
        }
        
        return result;  
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        int[] p = Array.ConvertAll(Console.ReadLine().Split(' '), pTemp => Convert.ToInt32(pTemp))
        ;
        int[] result = permutationEquation(p);

        textWriter.WriteLine(string.Join("\n", result));

        textWriter.Flush();
        textWriter.Close();
    }
}




























