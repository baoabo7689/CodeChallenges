Happy Ladybugs is a board game having the following properties:

    The board is represented by a string, , of length . The character of the string, , denotes the cell of the board.
        If is an underscore (i.e., _), it means the cell of the board is empty.
        If is an uppercase English alphabetic letter (ascii[A-Z]), it means the cell contains a ladybug of color .
        String will not contain any other characters.
    A ladybug is happy only when its left or right adjacent cell (i.e., ) is occupied by another ladybug having the same color.
    In a single move, you can move a ladybug from its current position to any empty cell.

Given the values of and for games of Happy Ladybugs, determine if it's possible to make all the ladybugs happy. For each game, print YES on a new line if all the ladybugs can be made happy through some number of moves. Otherwise, print NO.


As an example, . You can move the rightmost and to make and all the ladybugs are happy.

Input Format

The first line contains an integer , the number of games.

The next pairs of lines are in the following format:

    The first line contains an integer , the number of cells on the board.
    The second line contains a string describing the cells of the board.

Constraints

Output Format

For each game, print YES on a new line if it is possible to make all the ladybugs happy. Otherwise, print NO.

Sample Input 0

4
7
RBY_YBR
6
X_Y__X
2
__
6
B_RRBR

Sample Output 0

YES
NO
YES
YES

Explanation 0

The four games of Happy Ladybugs are explained below:

    Initial board:
    lady.png
    After the first move:
    lady(1).png
    After the second move:
    lady(2).png
    After the third move:
    lady(3).png
    Now all the ladybugs are happy, so we print YES on a new line.
    There is no way to make the ladybug having color Y happy, so we print NO on a new line.
    There are no unhappy ladybugs, so we print YES on a new line.
    Move the rightmost and to form .





======================================================================================================================================================



======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the happyLadybugs function below.
    static string happyLadybugs(string b) {
        Console.WriteLine(b);
        var n = b.Length;
        
        if(n == 1) {
            return b=="_" ? "YES" : "NO";
        }
        
        var isAlreadyHappy = (b[0] == '_' || b[1] == b[0]) && (b[n-1]=='_' || b[n-2]==b[n-1]);
        for(var i=1; i<b.Length-1; i++) {
            if(b[i] == '_') {
                continue;
            }
            
           if(b[i] != b[i-1] && b[i] != b[i+1]) {
               isAlreadyHappy = false;
               break;
           }   
        }
        
        if(isAlreadyHappy) {
            return "YES";
        }

        var counts = new Dictionary<char, int>();
        for(var i=0; i<b.Length; i++) {
            var c = b[i];
            if(counts.ContainsKey(c)) {
                counts[c]++;
            } else {
                counts.Add(c, 1);
            }
        }

        return counts.ContainsKey('_') && !counts.Any(p => p.Key != '_' && p.Value==1) ? "YES" : "NO";
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int g = Convert.ToInt32(Console.ReadLine());

        for (int gItr = 0; gItr < g; gItr++) {
            int n = Convert.ToInt32(Console.ReadLine());

            string b = Console.ReadLine();

            string result = happyLadybugs(b);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}


