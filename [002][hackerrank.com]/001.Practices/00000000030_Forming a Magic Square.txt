We define a magic square to be an matrix of distinct positive integers from to where the sum of any row, column, or diagonal of length is always equal to the same number: the magic constant.

You will be given a matrix of integers in the inclusive range . We can convert any digit to any other digit in the range at cost of . Given , convert it into a magic square at minimal cost. Print this cost on a new line.

Note: The resulting magic square must contain distinct integers in the inclusive range .

For example, we start with the following matrix :

5 3 4
1 5 8
6 4 2

We can convert it to the following magic square:

8 3 4
1 5 9
6 7 2

This took three replacements at a cost of .

Input Format

Each of the lines contains three space-separated integers of row .

Constraints

Output Format

Print an integer denoting the minimum cost of turning matrix into a magic square.

Sample Input 0

4 9 2
3 5 7
8 1 5

Sample Output 0

1

Explanation 0

If we change the bottom right value, , from to at a cost of , becomes a magic square at the minimum possible cost.

Sample Input 1

4 8 2
4 5 7
6 1 6

Sample Output 1

4

Explanation 1

Using 0-based indexing, if we make

    -> at a cost of
    -> at a cost of
    -> at a cost of ,

then the total cost will be . 



======================================================================================================================================================
-Generate all squares => min diff
-3x3 
each = n(n^2+1)/2 = 15

We have just eight ways and we can try accommodating them in the square. 
The central place belongs to one row, one column and the two diagonals, so the number we put in it must appear four times in the above sums: the only one is 5.
Similarly, in the four corners we have to place numbers that appear three times, that is: 2, 4, 6 and 8.


s[0][0]
= 1 => có 3 giá trị += 14 trong khi chỉ có 6+8=9+5=14 
= 2 => có 3 giá trị += 13, 5+8=6+7=9+4
= 3 => có 3 giá trị += 12 trong khi chỉ có 8+4=7+5
= 4 => có 3 giá trị += 11, 6+5=8+3=9+2
= 5 => có 3 giá trị += 10, 6+4=7+3=8+2=9+1
= 6 => có 3 giá trị += 9, 5+4=7+2=8+1
= 7 => có 3 giá trị += 8, 5+3=6+2
= 8 => có 3 giá trị += 7, 4+3=5+2=6+1
= 9 => có 3 giá trị += 6, 4+2=5+1



= 2 => có 3 giá trị += 13, 5+8=6+7=9+4
2 7 6
9 5 1 
4 3 8
 

2 9 4
7 5 3
6 1 8


= 4 => có 3 giá trị += 11, 6+5=8+3=9+2

4 3 8
9 5 1 
2 7 6

4 9 2
3 5 7
8 1 6


= 5 => có 3 giá trị += 10, 6+4=7+3=8+2=9+1
= 6 => có 3 giá trị += 9, 5+4=7+2=8+1

6 7 2
1 5 9
8 3 4 


6 1 8 
7 5 3 
2 9 4

= 8 => có 3 giá trị += 7, 4+3=5+2=6+1
8 3 4
1 5 9
6 7 2

8 1 6
3 5 7  
4 9 2


======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    static int squareDiff(int[][] s1, int[][] s2) {
        var diff = 0;
        for(var i=0; i<3; i++) {
            for(var j=0; j<3; j++) {
                diff += Math.Abs(s1[i][j] - s2[i][j]);
            }
        }
        
        return diff;
    }
    
    // Complete the formingMagicSquare function below.
    static int formingMagicSquare(int[][] s) {
        var allSquares = new int[][][] {
            new int[][] { new[] { 2,7,6 },new[] { 9,5,1 },new[] { 4,3,8 } },
            new int[][] { new[] { 2,9,4 },new[] { 7,5,3 },new[] { 6,1,8 } },
            new int[][] { new[] { 4,3,8 },new[] { 9,5,1 },new[] { 2,7,6 } },
            new int[][] { new[] { 4,9,2 },new[] { 3,5,7 },new[] { 8,1,6 } },
            new int[][] { new[] { 6,7,2 },new[] { 1,5,9 },new[] { 8,3,4 } },
            new int[][] { new[] { 6,1,8 },new[] { 7,5,3 },new[] { 2,9,4 } },
            new int[][] { new[] { 8,3,4 },new[] { 1,5,9 },new[] { 6,7,2 } },
            new int[][] { new[] { 8,1,6 },new[] { 3,5,7 },new[] { 4,9,2 } },
        };
        
        
        var minDiff = 50;
        for(var i=0; i<allSquares.Length; i++) {
            minDiff = Math.Min(minDiff, squareDiff(allSquares[i], s));
        }
                      
        return minDiff;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int[][] s = new int[3][];

        for (int i = 0; i < 3; i++) {
            s[i] = Array.ConvertAll(Console.ReadLine().Split(' '), sTemp => Convert.ToInt32(sTemp));
        }

        int result = formingMagicSquare(s);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}














































