Given a sequence of integers , a triplet is beautiful if:

Given an increasing sequenc of integers and the value of , count the number of beautiful triplets in the sequence.

For example, the sequence and . There are three beautiful triplets, by index: . To test the first triplet, and .

Function Description

Complete the beautifulTriplets function in the editor below. It must return an integer that represents the number of beautiful triplets in the sequence.

beautifulTriplets has the following parameters:

    d: an integer
    arr: an array of integers, sorted ascending

Input Format

The first line contains space-separated integers and , the length of the sequence and the beautiful difference.
The second line contains space-separated integers .

Constraints

Output Format

Print a single line denoting the number of beautiful triplets in the sequence.

Sample Input

7 3
1 2 4 5 7 8 10

Sample Output

3

Explanation

The input sequence is , and our beautiful difference . There are many possible triplets , but our only beautiful triplets are , and by value not index. Please see the equations below:




Recall that a beautiful triplet satisfies the following equivalence relation: where . 






======================================================================================================================================================



======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the beautifulTriplets function below.
    static int beautifulTriplets(int d, int[] arr) {
        var counts = new Dictionary<int ,int>();
        foreach(var a in arr) {
            if(counts.ContainsKey(a)) {
                counts[a]++;
            } else {
                counts.Add(a, 1);
            }
        }

        var result = 0;
        foreach(var a in arr) {
            if(counts[a] == 0) {
                continue;
            }
            
            if(counts.ContainsKey(a + d) && counts.ContainsKey(a + 2*d)) {
                Console.WriteLine(counts[a] + "," + counts[a + d]+ "," + counts[a + 2*d]);
                result += counts[a]*counts[a + d]*counts[a + 2*d];
            }     
            
            counts[a] = 0;      
        }
        
        return result;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nd = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nd[0]);

        int d = Convert.ToInt32(nd[1]);

        int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp => Convert.ToInt32(arrTemp))
        ;
        int result = beautifulTriplets(d, arr);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}







