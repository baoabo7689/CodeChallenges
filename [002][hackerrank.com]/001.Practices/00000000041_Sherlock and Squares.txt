Watson likes to challenge Sherlock's math ability. He will provide a starting and ending value describing a range of integers. Sherlock must determine the number of square integers within that range, inclusive of the endpoints.

Note: A square integer is an integer which is the square of an integer, e.g. .

For example, the range is and , inclusive. There are three square integers in the range: and .

Function Description

Complete the squares function in the editor below. It should return an integer representing the number of square integers in the inclusive range from to .

squares has the following parameter(s):

    a: an integer, the lower range boundary
    b: an integer, the uppere range boundary

Input Format

The first line contains , the number of test cases.
Each of the next lines contains two space-separated integers denoting and , the starting and ending integers in the ranges.

Constraints


Output Format

For each test case, print the number of square integers in the range on a new line.

Sample Input

2
3 9
17 24

Sample Output

2
0

Explanation

Test Case #00: In range , and are the two square integers.
Test Case #01: In range , there are no square integers. 






======================================================================================================================================================




======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the squares function below.
    static int squares(int a, int b) {
        var start = (int)Math.Ceiling(Math.Sqrt(a));
        var end = (int)Math.Floor(Math.Sqrt(b));
        
        return start <= end ? end - start + 1 : 0;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int q = Convert.ToInt32(Console.ReadLine());

        for (int qItr = 0; qItr < q; qItr++) {
            string[] ab = Console.ReadLine().Split(' ');

            int a = Convert.ToInt32(ab[0]);

            int b = Convert.ToInt32(ab[1]);

            int result = squares(a, b);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}





















