You are given an array of integers, , and a positive integer, . Find and print the number of pairs where and + is divisible by .

For example, and . Our three pairs meeting the criteria are and .

Function Description

Complete the divisibleSumPairs function in the editor below. It should return the integer count of pairs meeting the criteria.

divisibleSumPairs has the following parameter(s):

    n: the integer length of array
    ar: an array of integers
    k: the integer to divide the pair sum by

Input Format

The first line contains space-separated integers, and .
The second line contains space-separated integers describing the values of .

Constraints

Output Format

Print the number of pairs where and + is evenly divisible by .

Sample Input

6 3
1 3 2 6 1 2

Sample Output

 5

Explanation

Here are the valid pairs when :




======================================================================================================================================================



======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the divisibleSumPairs function below.
    static int divisibleSumPairs(int n, int k, int[] ar) {
        var mods = new Dictionary<int, int>();
        foreach(var value in ar) {
            var mod = value % k;
            if(mods.ContainsKey(mod)) {
                mods[mod]++;
            } else {
                mods.Add(mod, 1);
            }
        }        
        
        var count = 0;
        foreach(var value in ar) {
            var mod = value % k;
            var rev = (k-mod)%k;
            if(rev == mod) {
                count+= mods[rev]-1;
            } else if(mods.ContainsKey(rev)) {
                count+= mods[rev];
            }
        }     

       return count/2;   
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nk = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nk[0]);

        int k = Convert.ToInt32(nk[1]);

        int[] ar = Array.ConvertAll(Console.ReadLine().Split(' '), arTemp => Convert.ToInt32(arTemp))
        ;
        int result = divisibleSumPairs(n, k, ar);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}





