Check out the resources on the page's right side to learn more about merge sort. The video tutorial is by Gayle Laakmann McDowell, author of the best-selling interview book Cracking the Coding Interview.

In an array, , the elements at indices  and  (where ) form an inversion if . In other words, inverted elements  and  are considered to be "out of order". To correct an inversion, we can swap adjacent elements.

For example, consider the dataset . It has two inversions:  and . To sort the array, we must perform the following two swaps to correct the inversions:

Given  datasets, print the number of inversions that must be swapped to sort each dataset on a new line.

Function Description

Complete the function countInversions in the editor below. It must return an integer representing the number of inversions required to sort the array.

countInversions has the following parameter(s):

arr: an array of integers to sort .
Input Format

The first line contains an integer, , the number of datasets.

Each of the next  pairs of lines is as follows:

The first line contains an integer, , the number of elements in .
The second line contains  space-separated integers, .
Constraints

Output Format

For each of the  datasets, return the number of inversions that must be swapped to sort the dataset.

Sample Input

2  
5  
1 1 1 2 2  
5  
2 1 3 1 2
Sample Output

0  
4   
Explanation

We sort the following  datasets:

 is already sorted, so there are no inversions for us to correct. Thus, we print  on a new line.
We performed a total of  swaps to correct inversions.

======================================================================================================================================================



======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {
    static void merge(int[] A , int start, int mid, int end, ref long count) {
        //stores the starting position of both parts in temporary variables.
        int p = start, q = mid+1;
        var Arr = new int[end-start+1];
        var k=0;
        
        for(int i=start; i<=end; i++) {
            if(p > mid)      //checks if first part comes to an end or not.
            {
                Arr[k++] = A[q++] ;
            }
            else if (q > end)   //checks if second part comes to an end or not
            {
                Arr[k++] = A[p++];                
            }
            else if(A[p] <= A[q])     //checks which part has smaller element. 
            {
                Arr[k++] = A[p++];                
            }
            else {
                count += (mid - p + 1);
                Arr[k++] = A[q++];
            }
        }
        
        for (int j=0 ; j<k ; j++) {
            /* Now the real array has elements in sorted manner including both parts.*/
            A[start++] = Arr[j];
        }
    }
    
     static void merge_sort(int[] A, int start, int end, ref long count)
     {
         if(end <= start) {
             return;
         }
         
         int mid = (start + end) / 2 ;   // defines the current array in 2 parts .
         merge_sort(A, start, mid, ref count) ;     // sort the 1st part of array.
         merge_sort(A, mid+1, end, ref count) ;     // sort the 2nd part of array.

         // merge the both parts by comparing elements of both the parts.
         merge(A, start, mid, end, ref count);       
     }
    
    // Complete the countInversions function below.
    static long countInversions(int[] arr) {
        long count = 0;
        merge_sort(arr, 0, arr.Length-1, ref count);
        return count;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine());

        for (int tItr = 0; tItr < t; tItr++) {
            int n = Convert.ToInt32(Console.ReadLine());

            int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp => Convert.ToInt32(arrTemp))
            ;
            long result = countInversions(arr);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
























