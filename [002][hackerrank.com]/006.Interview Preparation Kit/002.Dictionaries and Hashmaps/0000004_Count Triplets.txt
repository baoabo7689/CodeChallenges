You are given an array and you need to find number of tripets of indices  such that the elements at those indices are in geometric progression for a given common ratio  and .

For example, . If , we have  and  at indices  and .

Function Description

Complete the countTriplets function in the editor below. It should return the number of triplets forming a geometric progression for a given  as an integer.

countTriplets has the following parameter(s):

arr: an array of integers
r: an integer, the common ratio
Input Format

The first line contains two space-separated integers  and , the size of  and the common ratio. 
The next line contains  space-seperated integers .

Constraints

Output Format

Return the count of triplets that form a geometric progression.

Sample Input 0

4 2
1 2 2 4
Sample Output 0

2
Explanation 0

There are  triplets in satisfying our criteria, whose indices are  and 

Sample Input 1

6 3
1 3 9 9 27 81
Sample Output 1

6
Explanation 1

The triplets satisfying are index , , , ,  and .

Sample Input 2

5 5
1 5 5 25 125
Sample Output 2

4
Explanation 2

The triplets satisfying are index , , , .



======================================================================================================================================================
n 
C(n-1) 
+ (n - 2)(n-1)/2








======================================================================================================================================================
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;
using System.Numerics;

class Solution {
    // Complete the countTriplets function below.
    static BigInteger countTriplets(List<long> arr, long r) {
        var countBiggerAfter = new Dictionary<BigInteger, long>();          
        var rawCounts = new Dictionary<BigInteger, long>();        
        BigInteger result = 0;        
        
        for(var i=arr.Count-1; i>=0; i--) {
            var a = arr[i];
            
            var biggerAfter = a*r;
            if(!countBiggerAfter.ContainsKey(a)) {
                countBiggerAfter.Add(a, 0);
            }
            
            if(rawCounts.ContainsKey(biggerAfter)) {
                countBiggerAfter[a] += rawCounts[biggerAfter];
            }
                           
            if(rawCounts.ContainsKey(a)) {
                rawCounts[a]++;
            } else {
                rawCounts.Add(a, 1);
            }
            
            BigInteger a2 = a;
            a2 *= r;
            
            BigInteger c;
            if(r==1) {
                c = (rawCounts[a]-1);
                c *= (rawCounts[a]-2);
                c /= 2;
            } else {
                c = countBiggerAfter.ContainsKey(a2) ? countBiggerAfter[a2] : 0;
            }
            
            result += c;   
        }
        
        return result;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nr = Console.ReadLine().TrimEnd().Split(' ');

        int n = Convert.ToInt32(nr[0]);

        long r = Convert.ToInt64(nr[1]);

        List<long> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt64(arrTemp)).ToList();

        BigInteger ans = countTriplets(arr, r);

        textWriter.WriteLine(ans);

        textWriter.Flush();
        textWriter.Close();
    }
}



