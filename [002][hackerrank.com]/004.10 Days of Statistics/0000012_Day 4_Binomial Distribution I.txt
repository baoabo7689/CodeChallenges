Objective 
In this challenge, we learn about binomial distributions. Check out the Tutorial tab for learning materials!

Task 
The ratio of boys to girls for babies born in Russia is . If there is  child born per birth, what proportion of Russian families with exactly  children will have at least  boys?

Write a program to compute the answer using the above parameters. Then print your result, rounded to a scale of  decimal places (i.e.,  format).

Input Format

A single line containing the following values:

1.09 1
If you do not wish to read this information from stdin, you can hard-code it into your program.

Output Format

Print a single line denoting the answer, rounded to a scale of  decimal places (i.e.,  format).

======================================================================================================================================================



======================================================================================================================================================

using System;
using System.Collections.Generic;
using System.IO;
class Solution {
    static void Main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        var pq = Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        var p1 = double.Parse(pq[0]);
        var q1 = double.Parse(pq[1]);
        var p = p1 / (p1+q1);
        var q = q1 / (p1+q1);
        double result = 0;
        var n = 6;
        for(var x=3; x<=n; x++) {
            result += b(x, p, q, n);
        }
        
        Console.WriteLine(result.ToString("0.###"));
    }
    
    static double b(int x, double p, double q, int n) {
        var n1 = 1;
        var x1 = 1;
        var nx1 = 1;
        for(var i=1; i<=n; i++) {
            if(i <= x) {
              x1 *= i;  
            }
            
            if(i <= n) {
              n1 *= i;  
            }
            
            if(i <= n-x) {
              nx1 *= i;  
            }
        }
        
        return Math.Pow(p, x)*Math.Pow(q, n-x)*n1/x1/nx1;
    }
}































