Objective
In this challenge, we practice calculating quartiles. Check out the Tutorial tab for learning materials and an instructional video!

Task
Given an array, , of integers, calculate the respective first quartile (), second quartile (), and third quartile (). It is guaranteed that , , and are integers.

Input Format

The first line contains an integer, , denoting the number of elements in the array.
The second line contains space-separated integers describing the array's elements.

Constraints

    , where is the element of the array.

Output Format

Print lines of output in the following order:

    The first line should be the value of .
    The second line should be the value of .
    The third line should be the value of .

Sample Input

9
3 7 8 5 12 14 21 13 18

Sample Output

6
12
16

Explanation

. When we sort the elements in non-decreasing order, we get . It's easy to see that .

As there are an odd number of data points, we do not include the median (the central value in the ordered list) in either half:

    Lower half (L): 3, 5, 7, 8

    Upper half (U): 13, 14, 18, 21

Now, we find the quartiles:

    is the . So, .
    is the . So, .
    is the . So, .







======================================================================================================================================================



======================================================================================================================================================
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class Solution {
    static void Main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
         var n = int.Parse(Console.ReadLine());
         var xs = Console.ReadLine().Split(' ').Select(s => int.Parse(s)).ToList();
         xs.Sort();
     
        var ls = new List<int>();
        var us = new List<int>();
        if(n%2 == 0) {
            ls.AddRange(xs.Take(n/2));
            us.AddRange(xs.Skip(n/2));
        } else {
            ls.AddRange(xs.Take(n/2));
            us.AddRange(xs.Skip(n/2 + 1));            
        }               
        
        Console.WriteLine(Median(ls));
        Console.WriteLine(Median(xs));
        Console.WriteLine(Median(us));
    }
    
    static double Median(List<int> arr) {
        var n = arr.Count();
        if(n%2 == 0) {
            return (arr[n/2-1] + arr[n/2]) / 2.0;
        }
        
        return arr[n/2];
    }
}





































