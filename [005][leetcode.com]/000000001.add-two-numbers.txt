You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


======================================================================================================================================================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var node1 = l1;
        var node2 = l2;
        var head = new ListNode(0);
        var node = head;
        var prev = head;
        var r = 0;
        
        while(node1 != null && node2 != null) {
            var s = node1.val + node2.val + r;
            node.val = s%10;
            r = s/10;
            node.next = new ListNode(0);
            
            node1 = node1.next;
            node2 = node2.next;
            prev = node;
            node = node.next;
        }
        
        while(node1 != null) {
            var s = node1.val + r;
            node.val = s%10;
            r = s/10;
            node.next = new ListNode(0);
            
            node1 = node1.next;
            prev = node;
            node = node.next;
        }
        
        
        while(node2 != null) {
            var s = node2.val + r;
            node.val = s%10;
            r = s/10;
            node.next = new ListNode(0);
            
            node2 = node2.next;
            prev = node;
            node = node.next;
        }
        
        if(r != 0) {
            node.val = r;            
        }
        
        if(node.val == 0) {
            prev.next = null;
        }
        
        return head;
    } 
}















